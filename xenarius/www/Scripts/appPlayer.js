var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var dxdata = DevExpress.data;
    function unwrapNestedLists(data) {
        var valueCallback = function (valueContext) { return valueContext.value; }, result = AppPlayer.propertyVisitor(data, valueCallback, {
            getValueCallback: function (value, context) {
                return ($.isPlainObject(value) && value.results && $.isArray(value.results)) ? value.results : AppPlayer.propertyVisitor(value, valueCallback, context);
            }
        });
        return result;
    }
    ;
    function replaceKeysWithObjectLinks(store, object, stores) {
        var newObject = {}, navigationFields = [];
        if (store.fields) {
            navigationFields = store.fields.filter(function (field) {
                return field.storeId && true;
            });
        }
        $.each(object, function (name, value) {
            if (name === "__metadata" || (value && (typeof value === "object") && value.__deferred)) {
                return;
            }
            newObject[name] = value;
        });
        navigationFields.forEach(function (field) {
            if (newObject[field.name]) {
                newObject[field.name] = {
                    __metadata: {
                        uri: stores[field.storeId]["_byKeyUrl"](object[field.name])
                    }
                };
            }
        });
        return newObject;
    }
    ;
    function isGUID(str) {
        if (typeof str !== "string") {
            return false;
        }
        return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(str);
    }
    function createGuids(data) {
        var valueCallback = function (valueContext) {
            var value = valueContext.value;
            if (isGUID(value)) {
                return new dxdata.Guid(value);
            }
            else {
                return value;
            }
        };
        return AppPlayer.propertyVisitor(data, valueCallback, { getValueCallback: function (value, context) { return AppPlayer.propertyVisitor(value, valueCallback, context); } });
    }
    ;
    function prepareLoadOptions(loadOptions) {
        return loadOptions.filter ? $.extend({}, loadOptions, { filter: createGuids(loadOptions.filter) }) : loadOptions;
    }
    function prepareKey(key, storeOptions) {
        return storeOptions.keyType === "Guid" ? new dxdata.Guid(key) : key;
    }
    var ODataStore = (function (_super) {
        __extends(ODataStore, _super);
        function ODataStore(storeOptions, stores) {
            _super.call(this, ODataStore.createODataStoreOptions(storeOptions));
            this.storeOptions = storeOptions;
            this.stores = stores;
        }
        ODataStore.createODataStoreOptions = function (storeOptions) {
            return {
                url: storeOptions.debugUrl || storeOptions.url,
                key: storeOptions.key,
                keyType: storeOptions.keyType,
                beforeSend: AppPlayer.addHeaders(storeOptions.headers),
                version: storeOptions.version,
                withCredentials: storeOptions.withCredentials !== undefined ? storeOptions.withCredentials : true
            };
        };
        ODataStore.prototype.load = function (loadOptions) {
            var d = $.Deferred();
            _super.prototype.load.call(this, prepareLoadOptions(loadOptions)).done(function (data) { d.resolve(unwrapNestedLists(data)); }).fail(d.reject);
            return d.promise();
        };
        ODataStore.prototype.byKey = function (key, extraOptions) {
            var d = $.Deferred();
            _super.prototype.byKey.call(this, prepareKey(key, this.storeOptions), extraOptions).done(function (data) { d.resolve(unwrapNestedLists(data)); }).fail(d.reject);
            return d.promise();
        };
        ODataStore.prototype.insert = function (values) {
            return _super.prototype.insert.call(this, replaceKeysWithObjectLinks(this.storeOptions, values, this.stores));
        };
        ODataStore.prototype.update = function (key, values) {
            return _super.prototype.update.call(this, key, replaceKeysWithObjectLinks(this.storeOptions, values, this.stores));
        };
        ODataStore.prototype.remove = function (key) {
            return _super.prototype.remove.call(this, prepareKey(key, this.storeOptions));
        };
        ODataStore.prototype.totalCount = function (loadOptions) {
            return _super.prototype.load.call(this, prepareLoadOptions(loadOptions));
        };
        return ODataStore;
    })(DevExpress.data.ODataStore);
    AppPlayer.ODataStore = ODataStore;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    //import apv = AppPlayer.Views;
    function sendRequest(url, method, data, dataType, headers) {
        var requestOptions = {
            url: url,
            type: method ? method.toUpperCase() : "GET",
            contentType: "application/json; charset=utf-8",
            dataType: dataType || "json",
            data: data
        };
        AppPlayer.addHeaders(headers)(requestOptions);
        return $.ajax(requestOptions)
            .fail(function (arg) {
            // Convert to Error so that DXData won't convert it
            var message;
            if (arg.responseJSON) {
                message = arg.responseJSON.Message;
            }
            else {
                message = arg.responseText;
            }
            var error = new Error();
            error["status"] = arg.status;
            error["responseJSON"] = arg.responseJSON;
            return error;
        });
    }
    var RestStore = (function (_super) {
        __extends(RestStore, _super);
        function RestStore(storeOptions, globalModel, application) {
            var _this = this;
            var compiledProcessResult = storeOptions.load.processResult ? application.createFunctionCompiler(storeOptions.load.processResult) : null, options = $.extend({}, storeOptions, {
                key: storeOptions.key,
                load: function (loadOptions) {
                    var d = $.Deferred();
                    _this.handler(storeOptions, "load", { $global: globalModel, $options: loadOptions }, "get")
                        .done(function (data) {
                        if (compiledProcessResult) {
                            compiledProcessResult.run({ $global: globalModel, $data: data }, { callerId: "load.processResult", callerType: "RestStore" })
                                .done(function (data) {
                                d.resolve(data);
                            })
                                .fail(d.reject);
                        }
                        else {
                            d.resolve(data);
                        }
                    }).fail(d.reject);
                    return d.promise();
                },
                byKey: function (key) {
                    var d = $.Deferred();
                    _this.handler(storeOptions, "byKey", { $global: globalModel, $key: key }, "get")
                        .done(function (data) {
                        if (compiledProcessResult) {
                            compiledProcessResult.run({ $global: globalModel, $data: data }, { callerId: "byKey.processResult", callerType: "RestStore" })
                                .done(function (data) {
                                d.resolve(data);
                            })
                                .fail(d.reject);
                        }
                        else {
                            d.resolve(data);
                        }
                    }).fail(d.reject);
                    return d.promise();
                },
                insert: function (values) {
                    var d = $.Deferred();
                    _this.handler(storeOptions, "insert", { $global: globalModel, $data: values }, "post")
                        .done(function (data) {
                        d.resolve(_this.keyOf(data));
                    })
                        .fail(d.reject);
                    return d.promise();
                },
                update: function (key, values) {
                    return _this.handler(storeOptions, "update", { $global: globalModel, $key: key, $data: values }, "patch");
                },
                remove: function (key) {
                    return _this.handler(storeOptions, "remove", { $global: globalModel, $key: key }, "delete");
                },
                totalCount: function (loadOptions) {
                    return _this.handler(storeOptions, "totalCount", { $global: globalModel, $options: loadOptions }, "get");
                }
            });
            _super.call(this, options);
            this._application = application;
        }
        RestStore.prototype.eval = function (expr, context) {
            if (!expr) {
                return undefined;
            }
            return AppPlayer.Logic.Operation.eval(expr, context);
        };
        RestStore.prototype.transformData = function (data, method) {
            if (data) {
                switch (method) {
                    case "get":
                        $.each(data, function (name, val) {
                            if (val) {
                                if (val instanceof Date) {
                                    data[name] = val.toISOString();
                                }
                                else {
                                    data[name] = "" + val;
                                }
                            }
                            else {
                                delete data[name];
                            }
                        });
                        break;
                    case "post":
                    case "patch":
                        data = JSON.stringify(data);
                        break;
                    default:
                        break;
                }
            }
            return data;
        };
        RestStore.prototype.handler = function (storeOptions, name, context, defaultMethod) {
            var _this = this;
            var options = storeOptions[name], url, method, data;
            if (!options || !options.urlExpr) {
                return AppPlayer.Logic.rejectPromise("No " + name + " url specified");
            }
            url = this.getUrl(options, context);
            //TODO: rewrite after refactoring functionCompiller
            //context.data = context.$options;
            method = options.method || defaultMethod;
            //TODO: rewrite after refactoring functionCompiller
            if (!options.getAjaxData) {
                data = {};
                return sendRequest(url, method, data, options["dataType"], storeOptions.headers);
            }
            else {
                var funcBody = options.getAjaxData, result = $.Deferred();
                this._application.createFunctionCompiler(funcBody)
                    .run(context)
                    .done(function (data) {
                    var tData = _this.transformData(_this.eval(JSON.stringify(data), context), method);
                    sendRequest(url, method, tData, options["dataType"], storeOptions.headers).done(function (data) {
                        result.resolve(data);
                    }).fail(function () {
                        result.reject();
                    });
                }).fail(function () {
                    result.reject();
                });
                return result.promise();
            }
        };
        RestStore.prototype.getUrl = function (options, context) {
            try {
                return this.eval(options.debugUrlExpr || options.urlExpr, context);
            }
            catch (e) {
                console.error(e);
                throw e;
            }
        };
        return RestStore;
    })(DevExpress.data.CustomStore);
    AppPlayer.RestStore = RestStore;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var dxdata = DevExpress.data;
    var ArrayStore = (function (_super) {
        __extends(ArrayStore, _super);
        function ArrayStore(storeOptions) {
            _super.call(this, storeOptions);
        }
        ArrayStore.prototype.byKey = function (key, extraOptions) {
            return _super.prototype.byKey.call(this, key, extraOptions)
                .then(function (value) {
                if (value instanceof Object) {
                    return $.extend({}, value);
                }
                else {
                    return value;
                }
            });
        };
        ArrayStore.prototype.load = function (obj) {
            return _super.prototype.load.call(this, obj)
                .then(function (value) {
                if (value) {
                    $.each(value, function (name, val) {
                        if (val instanceof Object) {
                            value[name] = $.extend({}, val);
                        }
                    });
                }
                return value;
            });
        };
        return ArrayStore;
    })(dxdata.ArrayStore);
    AppPlayer.ArrayStore = ArrayStore;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var DXError = DevExpress["Error"];
    function isCyclic(obj) {
        var seenObjects = [];
        function detect(obj) {
            if (obj && typeof obj === "object") {
                if (seenObjects.indexOf(obj) !== -1) {
                    return true;
                }
                seenObjects.push(obj);
                for (var key in obj) {
                    if (obj.hasOwnProperty(key) && detect(obj[key])) {
                        console.log(obj, "cycle at " + key);
                        return true;
                    }
                }
            }
            return false;
        }
        return detect(obj);
    }
    var JsonStore = (function (_super) {
        __extends(JsonStore, _super);
        function JsonStore(storeOptions, $global) {
            var _this = this;
            if ($global === void 0) { $global = null; }
            var cacheKey = storeOptions.jsonPath + storeOptions.url, load = function (options) {
                var d = $.Deferred(), requestOptions = {
                    url: storeOptions.url,
                    dataType: "json",
                    data: { path: storeOptions.jsonPath }
                }, cachedData = JsonStore.cache[cacheKey];
                AppPlayer.addHeaders(storeOptions.headers)(requestOptions);
                if (cachedData) {
                    requestOptions["headers"] = { "If-None-Match": cachedData.tag };
                }
                $.ajax(requestOptions).then(function (data, testStatus, request) {
                    var resultingData = data;
                    if (request.status === 200) {
                        JsonStore.cache[cacheKey] = { data: data, tag: request.getResponseHeader("ETag") };
                    }
                    else if (request.status === 304) {
                        resultingData = cachedData.data;
                    }
                    d.resolve(resultingData);
                });
                return d.promise();
            }, post = function (data, keyName, keyValue) {
                var requestOptions = {
                    url: storeOptions.url,
                    data: {
                        json: JSON.stringify(data),
                        path: storeOptions.jsonPath,
                        keyName: keyName,
                        keyValue: keyValue
                    },
                    method: "POST"
                };
                AppPlayer.addHeaders(storeOptions.headers)(requestOptions);
                return $.ajax(requestOptions);
            }, keyPrefix = storeOptions.keyPrefix;
            if (!keyPrefix) {
                keyPrefix = storeOptions.id;
                if (AppPlayer.endsWith(keyPrefix, "s")) {
                    keyPrefix = keyPrefix.substring(0, keyPrefix.length - 1);
                }
            }
            $.extend(storeOptions, {
                totalCount: function () {
                    return load().then(function (result) {
                        return AppPlayer.Logic.trivialPromise(result ? result.length : 0);
                    });
                },
                load: load,
                byKey: function (key) {
                    var that = _this;
                    return load()
                        .then(function (items) {
                        return AppPlayer.findInArray(items, function (item) {
                            return item[that.key()] === key;
                        });
                    });
                },
                update: function (key, values) {
                    var d = $.Deferred();
                    isCyclic(values);
                    post(values, _this.key(), key).then(function () {
                        d.resolve();
                    });
                    return d.promise();
                },
                insert: function (values) {
                    var that = _this, keyExpr = _this.key(), keyValue, d = $.Deferred();
                    $.getJSON(storeOptions.url).then(function (data) {
                        var getter = AppPlayer.compileGetter(storeOptions.jsonPath), setter, array = getter(data);
                        if (!array) {
                            array = [];
                            setter = AppPlayer.compileSetter(storeOptions.jsonPath);
                            setter(data, array);
                        }
                        if (keyExpr) {
                            keyValue = _this.keyOf(values);
                            if (!keyValue || (typeof keyValue === "object" && $.isEmptyObject(keyValue))) {
                                if ($.isArray(keyExpr)) {
                                    d.reject(DXError("E4007"));
                                    return;
                                }
                                var maxKeyNum = 0;
                                array.forEach(function (item) {
                                    var key = _this.keyOf(item);
                                    if (!AppPlayer.startsWith(key, keyPrefix)) {
                                        return;
                                    }
                                    try {
                                        var keyNum = parseInt(key.substr(keyPrefix.length), 10);
                                        if (keyNum > maxKeyNum) {
                                            maxKeyNum = keyNum;
                                        }
                                    }
                                    catch (e) {
                                        return;
                                    }
                                });
                                keyValue = values[keyExpr] = keyPrefix + (maxKeyNum + 1);
                                var context = {
                                    $key: keyValue,
                                    $global: $global
                                };
                                (storeOptions.fields || []).forEach(function (field) {
                                    if (!values[field.name]) {
                                        if (typeof field.defaultValueExpr === "string") {
                                            var defaultValue = AppPlayer.Logic.Operation.eval(field.defaultValueExpr, context);
                                            values[field.name] = defaultValue;
                                        }
                                    }
                                });
                            }
                            else if (AppPlayer.findInArray(array, function (p) { return p.id === keyValue; })) {
                                d.reject(DXError("E4008"));
                            }
                        }
                        else {
                            keyValue = values;
                        }
                        array.push(values);
                        post(values, that.key(), keyValue).then(function () {
                            d.resolve(keyValue);
                        }, function (error) {
                            d.reject(error);
                        });
                    });
                    return d.promise();
                },
                remove: function (key) {
                    var that = _this, result = $.Deferred(), storeUrl = storeOptions.url, keyExpr = storeOptions.key;
                    $.getJSON(storeUrl)
                        .then(function (data) {
                        var getter = AppPlayer.compileGetter(storeOptions.jsonPath), array = getter(data) || [], index = AppPlayer.indexInArray(array, function (item) { return item[keyExpr] === key; });
                        if (index !== -1) {
                            array.splice(index, 1);
                        }
                        post(null, that.key(), key).then(function () {
                            result.resolve();
                        }, function (error) {
                            result.reject(error);
                        });
                    }, function (error) {
                        result.reject(error);
                    });
                    return result.promise();
                }
            });
            _super.call(this, storeOptions);
        }
        JsonStore.cache = {};
        return JsonStore;
    })(DevExpress.data.CustomStore);
    AppPlayer.JsonStore = JsonStore;
})(AppPlayer || (AppPlayer = {}));
/// <reference path="stores/odatastore.ts" />
/// <reference path="stores/reststore.ts" />
/// <reference path="stores/arraystore.ts" />
/// <reference path="stores/designerstore.ts" />
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var dxhtml = DevExpress.framework.html;
    var dxdata = DevExpress.data;
    var dxconsole = DevExpress.require("/utils/utils.console");
    var Application = (function () {
        function Application(appConfig, options) {
            var _this = this;
            this.sharedObjects = {};
            this.started = $.Callbacks();
            this.dataError = $.Callbacks();
            this._timeout = undefined;
            this.setAppConfig(appConfig);
            this.id = appConfig.id;
            this.localStorage = new AppPlayer.LocalStorageWrapper(this);
            this.options = options;
            this.ns = {};
            this.appConfig.navigation = appConfig.navigation || { defaultView: "", items: [] };
            this.functions = this.createGlobalFunctions();
            this.appConfig.params = this.appConfig.params || [];
            this.appConfig.model = this.appConfig.model || [];
            this.model = AppPlayer.Model.createAppModel(this.appConfig, this);
            this.setModelValueFromParameter();
            this.loadNavigation();
            this.copyGlobalCommands();
            this.createStores();
            AppPlayer.Model.initializeDataSources(this.model, { $model: this.model, $global: this.model }, this, this.stores, false, this.appConfig.dataSources);
            this.typeInfoRepository = new AppPlayer.TypeInfoRepository(appConfig.dataStores);
            if (this.model.hasOwnProperty("title")) {
                var titleObserver = ko.computed(function () { return _this.model["title"]; });
                var formatTitle;
                if (this.id === "com.devexpress.Xenarius.Designer") {
                    formatTitle = function () {
                        if (titleObserver()) {
                            document.title = titleObserver() + " - Xenarius Admin";
                        }
                        else {
                            document.title = "Xenarius Admin";
                        }
                    };
                }
                else {
                    formatTitle = function () {
                        document.title = titleObserver();
                    };
                }
                titleObserver.subscribe(formatTitle);
                formatTitle();
            }
        }
        Object.defineProperty(Application, "SPLIT_NAV_VIEW_ID", {
            get: function () { return "splitNavigation"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Application, "SHARED_PARAMETER", {
            get: function () { return "xet-shared-object"; },
            enumerable: true,
            configurable: true
        });
        Application.prototype.setAppConfig = function (appConfig) {
            this.appConfig = appConfig;
            this.appConfig.platforms = this.appConfig.platforms || [
                {
                    name: "DesktopRule",
                    layout: "desktop",
                    defaultCommandContainer: "header",
                    defaultCommandLocation: "after",
                    options: {
                        generic: true
                    }
                },
                {
                    name: "PhoneRule",
                    layout: "slideout",
                    defaultCommandContainer: "header",
                    defaultCommandLocation: "after",
                    options: {
                        phone: true
                    }
                },
                {
                    name: "TabletRule",
                    layout: "split",
                    defaultCommandContainer: "header",
                    defaultCommandLocation: "after",
                    options: {
                        tablet: true
                    }
                }
            ];
            this.appConfig.views = this.appConfig.views || [];
            this.appConfig.views.forEach(function (view) {
                (view.commands || []).forEach(function (command) {
                    command.id = view.id + "_" + command.id;
                });
            });
        };
        Application.prototype.isSplitLayout = function () {
            var currentDevice = DevExpress.devices.current(), currentPlatform = AppPlayer.LayoutHelper.tryGetCurrentPlatform(this.appConfig.platforms, currentDevice), usesSplitLayout = currentPlatform && currentPlatform.layout === "split";
            return usesSplitLayout;
        };
        Application.prototype.setModelValueFromParameter = function () {
            var _this = this;
            this.appConfig.params.forEach(function (parameter) {
                var val = AppPlayer.getQueryVariable(parameter.name);
                if (val) {
                    _this.model[parameter.name] = val;
                }
            });
        };
        Application.prototype.loadNavigation = function () {
            var navigation = this.appConfig.navigation;
            if (!this.appConfig["isDesignMode"] && this.isSplitLayout() && navigation) {
                if (!navigation.customSplitNavigation && navigation.items && navigation.items.length > 0) {
                    this.appConfig.views.splice(0, 0, this.getSplitNavigationView());
                    (this.appConfig.dataStores = this.appConfig.dataStores || []).push(this.getNavigationItemsStore());
                }
            }
        };
        Application.prototype.copyGlobalCommands = function () {
            var _this = this;
            if (this.appConfig.globalCommands && this.appConfig.views) {
                var isSplitLayout = this.isSplitLayout();
                this.appConfig.views.forEach(function (view) {
                    if (isSplitLayout && view.pane !== "master") {
                        return;
                    }
                    if (!view.commands) {
                        view.commands = [];
                    }
                    _this.appConfig.globalCommands.forEach(function (command) {
                        view.commands.push($.extend({}, command, { id: command.id + view.id }));
                    });
                });
            }
        };
        Application.prototype.navigate = function (uri, options) {
            this.dxapp.navigate(uri, options);
        };
        Application.prototype.initializeDefaultView = function (currentDevice) {
            var currentPlatform = AppPlayer.LayoutHelper.tryGetCurrentPlatform(this.appConfig.platforms, currentDevice), usesSplitLayout = currentPlatform && currentPlatform.layout === "split", defaultView = currentPlatform && currentPlatform.defaultView ? currentPlatform.defaultView : this.appConfig.navigation.defaultView;
            if (!this.appConfig["isDesignMode"] && usesSplitLayout && !currentPlatform.defaultView) {
                var splitNav = AppPlayer.findInArray(this.appConfig.views, function (v) { return v.pane === "master"; });
                if (splitNav) {
                    defaultView = splitNav.id;
                }
            }
            return defaultView;
        };
        Application.prototype.run = function () {
            var _this = this;
            var that = this;
            dxdata.errorHandler = this._dataErrorHandler.bind(this);
            DevExpress.devices.current({ platform: "generic" });
            var currentDevice = DevExpress.devices.current();
            this.defaultView = this.initializeDefaultView(currentDevice);
            this.moduleLoader = new AppPlayer.ModulesLoader(this, window["progressReporter"]);
            var moduleInited = this.moduleLoader.initModules(this.appConfig.modules);
            moduleInited.done(function () {
                var htmlApplicationOptions, layoutSet;
                _this._createViews(document.body);
                htmlApplicationOptions = _this.htmlAppConfiguration();
                layoutSet = AppPlayer.LayoutHelper.createLayoutSet(_this.appConfig.platforms, _this.appConfig["isDesignMode"], _this.appConfig.views);
                htmlApplicationOptions.layoutSet = layoutSet.layoutSet;
                _this.dxapp = _this._createApplication(htmlApplicationOptions);
                _this.dxapp.on("resolveViewCacheKey", function (args) {
                    var viewId = args.routeData["view"], refresh = that.appConfig.views.some(function (value) {
                        return value.id === viewId && value.refreshWhenShown;
                    });
                    if (refresh) {
                        args.key = viewId;
                    }
                });
                _this.dxapp["_processRequestResultLockEnabled"] = true;
                _this.dxapp.on("resolveLayoutController", function (args) {
                    var foundController = AppPlayer.LayoutHelper.tryGetViewSpecificLayoutController(args.viewInfo["viewName"], layoutSet.viewSpecificLayouts);
                    if (foundController) {
                        args.layoutController = foundController;
                    }
                });
                var onViewShown = function () {
                    // Forces DOM elements height recalculation
                    $(window).resize();
                    _this.started.fire(_this);
                    _this.dxapp.off("viewShown", onViewShown);
                };
                _this.dxapp.on("viewShown", onViewShown);
                // Cancels navigation to urls with shared parameters when shared objects are not set
                _this.dxapp.on("navigating", _this._onNavigating.bind(_this));
                _this.dxapp.router.register(":view/:parameters", { view: that.defaultView, parameters: "" });
                if (window["xetHandleOpenURL"]) {
                    var openUrl = window["xetHandleOpenURL"];
                    _this.functions["navigateToView"](openUrl.uri, openUrl.params, true);
                }
                else {
                    if (location.hash && location.hash !== "#") {
                        if (location.hash === "#test-error") {
                            _this.dxapp["bbb"].ccc.ddd = 100;
                        }
                        _this.dxapp.navigate();
                    }
                    else {
                        _this.navigateToDefaultView();
                    }
                }
                _this.authorization = new AppPlayer.Modules.Authorization(_this.appConfig, _this);
            });
        };
        Application.prototype._createApplication = function (options) {
            return new dxhtml.HtmlApplication(options);
        };
        Application.prototype._dataErrorHandler = function (e) {
            if (e["httpStatus"] === 404) {
                this.navigateToDefaultView();
            }
            else {
                this.dataError.fire(e);
            }
        };
        Application.prototype._createViews = function (rootElement) {
            var _this = this;
            if (!this.appConfig.views) {
                return;
            }
            this.appConfig.views.forEach(function (view) {
                var newView = new AppPlayer.Views.View(view, _this);
                _this.ns[view.id] = newView.viewModel;
            });
        };
        Application.prototype.registerMissingTemplate = function (componentType) {
            if ($.inArray(componentType, Application.missingTemplates) === -1) {
                Application.missingTemplates.push(componentType);
            }
        };
        Application.prototype.templateIsMissing = function (componentType) {
            return $.inArray(componentType, Application.missingTemplates) !== -1;
        };
        //TODO Pletnev: extract into SplitLayoutModule
        //TODO Pletnev: come up with a unique identifier instead of "navigationItems"
        Application.prototype.getNavigationItemsStore = function () {
            return {
                id: "navigationItems",
                type: "array",
                array: this.htmlAppNavigation()
            };
        };
        //TODO Pletnev: extract into SplitLayoutModule
        //TODO Pletnev: come up with a unique identifier instead of "splitNavigation"
        Application.prototype.getSplitNavigationView = function () {
            var _this = this;
            return {
                "id": Application.SPLIT_NAV_VIEW_ID,
                "title": this.appConfig.navigation && this.appConfig.navigation.title ? this.appConfig.navigation.title : "Menu",
                "pane": "master",
                "dataSources": [
                    {
                        "id": "navigationItemsDatasource",
                        "store": "navigationItems"
                    }
                ],
                "components": [
                    {
                        "id": "navigationList",
                        "type": "list",
                        "dataSource": "$model.navigationItemsDatasource",
                        "itemComponents": [{
                                id: "navigationItem",
                                type: "label",
                                text: "$data.title",
                                style: {
                                    "fontSize": "16px",
                                    "marginRight": "10px",
                                    "marginLeft": "10px",
                                    "marginBottom": "10px",
                                    "marginTop": "10px"
                                }
                            }],
                        "onItemClick": function (context) {
                            typeof context.$data["onExecute"] === "function" ? context.$data["onExecute"]() : _this.functions["navigateToView"](context.$data["onExecute"].substr(1));
                        }
                    }
                ]
            };
        };
        Application.prototype.createGlobalFunctions = function () {
            var _this = this;
            var functions = {};
            var busyCounter = 0;
            var busyInstance;
            functions["busy"] = function () {
                busyCounter++;
                if (busyCounter === 1) {
                    busyInstance = $("<div>")
                        .appendTo(DevExpress.viewPort())
                        .addClass("dx-static")
                        .dxLoadPanel()
                        .data("dxLoadPanel");
                    busyInstance.option("onHidden", function (args) {
                        args.element.remove();
                    });
                    busyInstance.show();
                }
            };
            functions["available"] = function () {
                busyCounter--;
                if (busyCounter === 0) {
                    busyInstance.hide();
                }
                if (busyCounter < 0) {
                    throw Error("Unpaired free method call");
                }
            };
            functions["back"] = function () { return _this.dxapp.back(); };
            functions["navigateToView"] = function (viewId, parameters, srcPane) {
                if (!viewId) {
                    viewId = _this.defaultView;
                }
                var view = _this.appConfig.views.filter(function (view) {
                    return view.id === viewId;
                })[0];
                if (view.params && view.params.filter(function (p) { return !AppPlayer.Views.ViewModel.optional(p); }).length > 0 && !parameters) {
                    console.error("NavigateToView '" + view.id + "'. View parameters not found.");
                }
                else if (view.params) {
                    var missingParameters;
                    view.params.forEach(function (param) {
                        if (!parameters || parameters[param.name] === undefined) {
                            if (!AppPlayer.Views.ViewModel.optional(param)) {
                                if (!missingParameters) {
                                    missingParameters = [];
                                }
                                missingParameters.push(param.name);
                            }
                            return;
                        }
                        var parameter = parameters[param.name], typeInfo = _this.typeInfoRepository.get(param.type);
                        // TODO: typeInfo must be defined (unknown type?)
                        if (typeInfo && typeInfo.kind === AppPlayer.TYPES.STORE_TYPE) {
                            var store = _this.stores[typeInfo.name];
                            if (parameter !== undefined) {
                                if (param.shared) {
                                    _this.sharedObjects[param.name] = parameter;
                                }
                                parameters[param.name] = store.keyOf(parameter);
                            }
                        }
                        else if (param.shared) {
                            _this.sharedObjects[param.name] = parameter;
                            parameters[param.name] = Application.SHARED_PARAMETER;
                        }
                    });
                    if (missingParameters) {
                        console.error("NavigateToView '" + view.id + "'. Missing parameters: " + missingParameters.join(", "));
                    }
                }
                var options = undefined;
                if (_this.isSplitLayout() && view.pane === "master") {
                    options = { root: false };
                }
                else if (_this.isNavigationItem(viewId) || _this.isCrossPaneTransition(srcPane, view.pane) || _this.isAuthorizationView(viewId)) {
                    options = { root: true, target: "current" };
                }
                if (!parameters || $.isEmptyObject(parameters)) {
                    _this.navigate(viewId, options);
                }
                else {
                    _this.navigate({
                        view: viewId,
                        parameters: parameters
                    }, options);
                }
            };
            functions["load"] = function (storeId, options) {
                return _this.stores[storeId].load(options);
            };
            functions["byKey"] = function (storeId, key, extraOptions) {
                return _this.stores[storeId].byKey(key, extraOptions);
            };
            functions["keyOf"] = function (storeId, object) {
                return _this.stores[storeId].keyOf(object);
            };
            functions["save"] = function (object, storeId, key) {
                functions["busy"]();
                var store = _this.stores[storeId];
                if (!key) {
                    key = store.keyOf(object);
                }
                var promise = key === undefined ? store.insert(object) : store.update(key, object);
                return promise.then(function (storedObject, serverKey) {
                    if (!key) {
                        object[store.key()] = serverKey;
                    }
                }).always(functions["available"]);
            };
            functions["insert"] = function (object, storeId) {
                functions["busy"]();
                return _this.stores[storeId].insert(object).always(functions["available"]);
            };
            functions["delete"] = function (objectOrKey, storeId) {
                var store = _this.stores[storeId], key = $.isPlainObject(objectOrKey) ? store.keyOf(objectOrKey) : objectOrKey;
                functions["busy"]();
                return store.remove(key).always(functions["available"]);
            };
            functions["refresh"] = function (storeId) {
                var store = _this.stores[storeId];
                store["fireEvent"]("modified");
            };
            functions["getDataStoreConfig"] = function (storeId) {
                var filtered = _this.appConfig.dataStores.filter(function (store) { return store.id === storeId; });
                if (filtered.length === 0) {
                    throw "Data provider '" + storeId + "' is not found!";
                }
                if (filtered.length > 1) {
                    console.warn("Found %o data providers with id '%o'", filtered.length, storeId);
                }
                return filtered[0];
            };
            functions["getDataStore"] = function (storeId) {
                return _this.stores[storeId];
            };
            functions["log"] = function (level, message) {
                var logger = dxconsole.logger;
                logger[level](message);
            };
            functions["getCookie"] = function (params) {
                var name = params.cookieName + "=", cookieArray = document.cookie.split(";"), result = "", deffered = $.Deferred();
                for (var i = 0; i < cookieArray.length; i++) {
                    var cookie = cookieArray[i];
                    while (cookie.charAt(0) === " ") {
                        cookie = cookie.substring(1);
                    }
                    if (cookie.indexOf(name) === 0) {
                        result = cookie.substring(name.length, cookie.length);
                        break;
                    }
                }
                deffered.resolve(result);
                return deffered;
            };
            return functions;
        };
        Application.prototype.isNavigationItem = function (viewId) {
            return this.appConfig.navigation &&
                AppPlayer.indexInArray(this.appConfig.navigation.items, function (item) { return item.id === viewId; }) !== -1;
        };
        Application.prototype.isAuthorizationView = function (viewId) {
            return this.appConfig.authorization && this.appConfig.authorization.loginView === viewId;
        };
        Application.prototype.isCrossPaneTransition = function (srcPane, dstPane) {
            if (srcPane === void 0) { srcPane = "detail"; }
            if (dstPane === void 0) { dstPane = "detail"; }
            return this.isSplitLayout() && srcPane !== dstPane;
        };
        Application.prototype.processParameterLoadingError = function (name, id) {
            var dialog = DevExpress.ui.dialog.custom({
                title: "Error",
                message: "Cannot load an '" + name + "' parameter with the '" + id + "' key.",
                buttons: [{
                        text: "Go Back",
                        onClick: this.functions["back"]
                    }]
            });
            dialog.show();
        };
        Application.prototype.createStores = function () {
            var _this = this;
            var app = this;
            if (this.stores) {
                return;
            }
            this.stores = {};
            (this.appConfig.dataStores || []).forEach(function (item) {
                var store = null, storeOptions = AppPlayer.Model.createLinkedModel(item, { $global: _this.model }, { callerType: "data provider options", callerId: item.id });
                switch (item.type) {
                    case "odata":
                        store = new AppPlayer.ODataStore(storeOptions, app.stores);
                        break;
                    case "array":
                        var array = storeOptions.array;
                        AppPlayer.transformISODates(array);
                        store = new AppPlayer.ArrayStore({
                            data: array,
                            key: storeOptions.key
                        });
                        break;
                    case "json":
                        store = new AppPlayer.JsonStore(storeOptions, _this.model);
                        break;
                    case "rest":
                        store = new AppPlayer.RestStore(storeOptions, _this.model, _this);
                        break;
                    case "local":
                        var localArray = storeOptions.array;
                        var name = storeOptions.name;
                        var flushInterval = storeOptions.flushInterval;
                        var immediate = storeOptions.immediate;
                        AppPlayer.transformISODates(array);
                        store = new dxdata.LocalStore({
                            data: localArray,
                            key: storeOptions.key,
                            name: name,
                            immediate: immediate,
                            flushInterval: flushInterval
                        });
                        break;
                    default:
                        console.error("Unknown store type '" + storeOptions.type + "'");
                }
                _this.stores[storeOptions.id] = store;
            });
        };
        Application.prototype.getCommandMapping = function () {
            var _this = this;
            var commandMapping = {};
            (this.appConfig.views || []).forEach(function (view) {
                AppPlayer.LayoutHelper.fillCommandMapping(commandMapping, view.commands, _this.appConfig.platforms, DevExpress.devices.current());
            });
            return commandMapping;
        };
        Application.prototype._onNavigating = function (e) {
            var _this = this;
            if (this._timeout) {
                clearTimeout(this._timeout);
                this._timeout = undefined;
                this.functions["available"]();
            }
            var sharedParameterIndex = e.uri.indexOf(Application.SHARED_PARAMETER);
            if (sharedParameterIndex >= 0 && Object.keys(this.sharedObjects).length === 0) {
                e.cancel = true;
                if (this.dxapp) {
                    setTimeout(function () { _this.navigateToDefaultView(); });
                }
            }
            else {
                var view = this.dxapp ? this.dxapp.router.parse(e.uri)["view"] : e.uri, viewModules = this.appConfig.views.filter(function (item) { return item.id === view; })[0].modules || [], allViewModulesLoaded = viewModules.every(function (_module) { return _this.moduleLoader.alreadyLoadedModules.indexOf(_module["src"] || _module) !== -1; });
                if (!allViewModulesLoaded) {
                    e.cancel = true;
                    this.functions["busy"]();
                    this.moduleLoader.initModules(viewModules).done(function () {
                        _this._timeout = setTimeout(function () {
                            _this.navigate(e.uri, e.options);
                        });
                    });
                }
            }
        };
        Application.prototype.createFunctionCompiler = function (code) {
            if (!this.functions) {
                console.error("Functions parameter is necessary for compiler");
            }
            return new AppPlayer.Logic.FunctionCompiler(this.functions, code);
        };
        Application.prototype.navigateToDefaultView = function () {
            var _this = this;
            var defaultView = AppPlayer.findInArray(this.appConfig.views, function (view) { return view.id === _this.defaultView; });
            if (!defaultView) {
                if (this.defaultView) {
                    AppPlayer.showErrorDialog("Default view '" + this.defaultView + "' doesn't exist.");
                }
                else if (this.appConfig.views.length) {
                    defaultView = this.appConfig.views[0];
                    if (this.appConfig.views.length > 1) {
                        AppPlayer.showErrorDialog("You can specify app default view in the designer. Click the cogwheel button next to the app title, then change Navigation - Default View property.");
                    }
                }
                else {
                    AppPlayer.showErrorDialog("Your app doesn't have any views. Please create one in the designer.");
                }
            }
            if (defaultView) {
                this.dxapp.navigate({ view: defaultView.id }, { target: "current" });
            }
        };
        Application.prototype.on = function (eventName, handler) {
            switch (eventName) {
                case "started":
                    this.started.add(handler);
                    break;
                case "dataError":
                    this.dataError.add(handler);
                    break;
                default:
                    this.dxapp.on(eventName, handler);
            }
        };
        Application.prototype.off = function (eventName, handler) {
            switch (eventName) {
                case "started":
                    this.started.remove(handler);
                    break;
                case "dataError":
                    this.dataError.remove(handler);
                    break;
                default:
                    this.dxapp.off(eventName, handler);
            }
        };
        Application.prototype.getNavigationItemTitle = function (item) {
            var title = item.title, viewId, view;
            if (!title) {
                viewId = item.id;
                view = AppPlayer.findInArray(this.appConfig.views, function (view) { return view.id === viewId; });
                title = view ? view.navigationTitle || view.title : "View Not Found";
            }
            return title;
        };
        Application.prototype.htmlAppNavigation = function () {
            var _this = this;
            return this.appConfig.navigation.items.map(function (item) {
                if (typeof item === "string") {
                    item = { id: item };
                }
                var functionCompiler = item.onExecute ? _this.createFunctionCompiler(item.onExecute) : undefined, executionHandler;
                if (functionCompiler) {
                    executionHandler = function (e) {
                        return functionCompiler.run({
                            $global: _this.model,
                            $model: undefined,
                            $data: e,
                            $value: undefined
                        }, {
                            callerType: "navigation item",
                            callerId: item.id
                        });
                    };
                }
                var itemCounter = 0, id = item.id || "item" + ++itemCounter, result = {
                    id: id,
                    onExecute: executionHandler || (_this.appConfig["isDesignMode"] !== true ? "#" + (item.id || item) : function () { }),
                    title: _this.getNavigationItemTitle(item),
                    visible: (typeof item.visible === "string" && item.visible.length > 0) ?
                        AppPlayer.wrapModelReference(item.visible, { $global: _this.model }, { callerType: "property of the " + id + " command", callerId: "visible" }) :
                        (item.visible || true)
                };
                if ($.isPlainObject(item)) {
                    result = $.extend({}, item, result);
                }
                return result;
            });
        };
        Application.prototype.htmlAppConfiguration = function () {
            var options = {
                namespace: this.ns,
                navigation: this.htmlAppNavigation(),
                commandMapping: this.getCommandMapping()
            };
            if (AppPlayer.LayoutHelper.getDeviceType() === "desktop") {
                options.mode = "webSite";
            }
            return options;
        };
        Application.prototype.removeViewCache = function (key) {
            this.dxapp.viewCache.removeView(key);
        };
        Application.prototype.viewCacheKey = function () {
            return window.location.hash.substr(1);
        };
        Application.missingTemplates = [];
        return Application;
    })();
    AppPlayer.Application = Application;
    ;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    var Logic;
    (function (Logic) {
        "use strict";
        var FunctionCompiler = (function () {
            function FunctionCompiler(functions, calls) {
                this.functions = functions;
                this.calls = calls;
            }
            FunctionCompiler.prototype.run = function (context, callerInfo) {
                var _this = this;
                var promise, errorHandler = function (error) {
                    var errorMessage = "";
                    AppPlayer.showErrorDialog(error);
                    if (callerInfo && callerInfo.callerType && callerInfo.callerId) {
                        errorMessage = "Error occurred when trying to evaluate the '" + callerInfo.callerId + "' " + callerInfo.callerType + ":\r\n";
                    }
                    errorMessage += error + "\r\n" + JSON.stringify(_this.calls, null, 2);
                    FunctionCompiler.consoleHandler(errorMessage);
                };
                if (!this.strategy) {
                    this.strategy = this.createStrategy(this.functions, this.calls);
                }
                try {
                    var contextParams = [];
                    if (context) {
                        $.each(context, function (name) {
                            contextParams.push(name);
                        });
                    }
                    promise = this.strategy.run(context, contextParams);
                    promise.fail(errorHandler);
                }
                catch (e) {
                    errorHandler(e);
                    return rejectPromise();
                }
                return promise;
            };
            FunctionCompiler.prototype.createStrategy = function (functions, calls) {
                if (calls instanceof Function) {
                    return new CompilerJSFunctionStrategy(functions, calls);
                }
                else if (!calls || $.isEmptyObject(calls)) {
                    return new CompilerStrategy(functions);
                }
                else if (typeof calls === "string") {
                    return BindingFunctionStrategy.isСompatible(calls)
                        ? new BindingFunctionStrategy(functions, calls)
                        : new CompilerTrivialStrategy(functions, calls);
                }
                else {
                    var _calls = calls.logic || calls;
                    return new CompilerInlineFunctionStrategy(functions, _calls);
                }
            };
            FunctionCompiler.consoleHandler = function (errorMessage) { return console.error(errorMessage); };
            return FunctionCompiler;
        })();
        Logic.FunctionCompiler = FunctionCompiler;
        var CompilerStrategy = (function () {
            function CompilerStrategy(functions) {
                this.functions = functions;
            }
            CompilerStrategy.prototype.run = function (context, contextParams) { return trivialPromise(); };
            CompilerStrategy.prototype.compile = function (functions, expr, paramNames) {
                var funcBody = "with($functions){" + expr + "}", allParamNames = ["$functions"];
                [].push.apply(allParamNames, paramNames);
                var func = new Function(allParamNames.join(", "), funcBody);
                return function (params) {
                    var args = [functions];
                    paramNames.forEach(function (name) {
                        args.push(params[name]);
                    });
                    return func.apply(func, args);
                };
            };
            return CompilerStrategy;
        })();
        var CompilerJSFunctionStrategy = (function (_super) {
            __extends(CompilerJSFunctionStrategy, _super);
            //private compiledFunctions: (params: {}) => any;
            function CompilerJSFunctionStrategy(functions, calls) {
                _super.call(this, functions);
                this.calls = calls;
            }
            CompilerJSFunctionStrategy.prototype.run = function (context, contextParams) {
                /*if(!this.compiledFunctions) {
                    this.compiledFunctions = this.calls;
                }*/
                var result = this.calls(context);
                // Promise duck typing
                if (result && typeof result.always === "function" && typeof result.done === "function") {
                    return result;
                }
                else {
                    return trivialPromise(result);
                }
            };
            return CompilerJSFunctionStrategy;
        })(CompilerStrategy);
        var CompilerTrivialStrategy = (function (_super) {
            __extends(CompilerTrivialStrategy, _super);
            function CompilerTrivialStrategy(functions, calls) {
                _super.call(this, functions);
                this.calls = calls;
            }
            CompilerTrivialStrategy.prototype.run = function (context, contextParams) {
                if (!this.compiledFunctions) {
                    this.compiledFunctions = this.compile(this.functions, this.calls, contextParams);
                }
                var result = this.compiledFunctions(context);
                // Promise duck typing
                if (result && typeof result.always === "function" && typeof result.done === "function") {
                    return result;
                }
                else {
                    return trivialPromise(result);
                }
            };
            return CompilerTrivialStrategy;
        })(CompilerStrategy);
        var CompilerInlineFunctionStrategy = (function (_super) {
            __extends(CompilerInlineFunctionStrategy, _super);
            function CompilerInlineFunctionStrategy(functions, calls) {
                _super.call(this, functions);
                this.calls = calls;
            }
            CompilerInlineFunctionStrategy.prototype.getAllVariables = function (params, variables) {
                var result = {};
                variables.forEach(function (v) {
                    result[v.name] = v;
                });
                $.each(params, function (name) {
                    if (!result[name]) {
                        result[name] = new Logic.Variable({ name: name, value: null, parameter: true, type: "object" });
                    }
                });
                return result;
            };
            CompilerInlineFunctionStrategy.prototype.run = function (context, contextParams) {
                if (!this.calls) {
                    return null;
                }
                var variables = [], calls = [];
                if (this.calls.variables) {
                    variables = this.calls.variables.map(function (value) {
                        return Logic.Variable.fromJson(value);
                    });
                }
                if (this.calls.calls) {
                    calls = this.calls.calls.map(function (call) {
                        return Logic.Operation.fromJson(call);
                    });
                }
                var allVariables = this.getAllVariables(context, variables);
                Object.getOwnPropertyNames(allVariables).forEach(function (name) {
                    var variable = allVariables[name];
                    variable.resetValue();
                    variable.value = context && variable.parameter ? context[variable.name] : variable.value;
                    allVariables[variable.name] = variable;
                });
                return Logic.Operation.run(calls, allVariables, this.functions)
                    .then(function (result) {
                    if (result && result.flow === Logic.Flow.Return) {
                        return trivialPromise(result.value);
                    }
                    return trivialPromise();
                });
            };
            return CompilerInlineFunctionStrategy;
        })(CompilerStrategy);
        var BindingFunctionStrategy = (function (_super) {
            __extends(BindingFunctionStrategy, _super);
            function BindingFunctionStrategy(functions, functionName) {
                _super.call(this, functions, functionName);
            }
            BindingFunctionStrategy.isСompatible = function (functionName) {
                return /^\$(global|model)\.[\w\$]+$/.test(functionName);
            };
            BindingFunctionStrategy.prototype.compile = function (functions, functionName, argNames) {
                var funcBody = "return " + functionName + "($context);", allParamNames = ["$context"];
                [].push.apply(allParamNames, argNames);
                var func = new Function(allParamNames.join(", "), funcBody);
                return function (context) {
                    var args = [context];
                    argNames.forEach(function (name) {
                        args.push(context[name]);
                    });
                    return func.apply(func, args);
                };
            };
            return BindingFunctionStrategy;
        })(CompilerTrivialStrategy);
        function trivialPromise() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var d = $.Deferred();
            return d.resolve.apply(d, arguments).promise();
        }
        Logic.trivialPromise = trivialPromise;
        function rejectPromise() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            var d = $.Deferred();
            return d.reject.apply(d, arguments).promise();
        }
        Logic.rejectPromise = rejectPromise;
        function returnsValue(calls) {
            if (!calls) {
                return false;
            }
            var result = false, visitor = function (target) {
                if (target["_type"] === "Event" && target["flow"] === Logic.Flow.Return) {
                    result = true;
                    return;
                }
                $.each(target, function (_, value) {
                    if (result) {
                        return false;
                    }
                    if (value && ($.isArray(value) || typeof value === "object")) {
                        visitor(value);
                    }
                });
            };
            visitor(calls);
            return result;
        }
        Logic.returnsValue = returnsValue;
    })(Logic = AppPlayer.Logic || (AppPlayer.Logic = {}));
})(AppPlayer || (AppPlayer = {}));
/// <reference path="logic/functioncompiler.ts" />
var AppPlayer;
(function (AppPlayer) {
    var Modules;
    (function (Modules) {
        "use strict";
        var AuthorizationLocation = (function () {
            function AuthorizationLocation() {
            }
            return AuthorizationLocation;
        })();
        var Authorization = (function () {
            function Authorization(appConf, app) {
                var _this = this;
                this.locations = [];
                this.loginView = "";
                this.allowAnonymous = true;
                if (appConf.authorization) {
                    var auth = appConf.authorization;
                    this.loginView = auth.loginView;
                    this.allowAnonymous = auth.allowAnonymous;
                    (auth.locations || []).forEach(function (item) {
                        var allowAnonymous = item.allowAnonymous;
                        if (typeof allowAnonymous === "string") {
                            allowAnonymous = allowAnonymous.toLowerCase() === "true";
                        }
                        _this.locations.push({ view: item.view, allowAnonymous: allowAnonymous });
                    });
                }
                this.app = app;
                app.on("dataError", function (e) {
                    if (e["httpStatus"] === 401 || e["status"] === 401 || e.message === "Unauthorized") {
                        _this.logout();
                    }
                });
                this.onNavigating = function (e) {
                    if (!_this.canNavigate(e.uri)) {
                        if (_this.loginView) {
                            e.uri = _this.loginView;
                        }
                        else {
                            e.cancel = true;
                            AppPlayer.showErrorDialog("Login view is not specified and anonymous access is disabled");
                        }
                    }
                };
                this.app.on("navigating", this.onNavigating);
            }
            Object.defineProperty(Authorization.prototype, "authenticated", {
                get: function () {
                    return !!this.app.model.authenticated;
                },
                enumerable: true,
                configurable: true
            });
            Authorization.prototype.canNavigate = function (path) {
                if (this.authenticated) {
                    return true;
                }
                var locations = this.locations.filter(function (location) { return path.indexOf(location.view) === 0; });
                return locations.length ? locations[0].allowAnonymous : this.allowAnonymous;
            };
            Authorization.prototype.logout = function () {
                this.app.model.authenticated = false;
                if (this.loginView) {
                    this.app.navigate({ view: this.loginView }, { root: true });
                }
                else {
                    AppPlayer.showErrorDialog("Login view is not specified");
                }
            };
            return Authorization;
        })();
        Modules.Authorization = Authorization;
    })(Modules = AppPlayer.Modules || (AppPlayer.Modules = {}));
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var dxui = DevExpress.ui;
    var dxdate = DevExpress.require("/utils/utils.date");
    // Fixes dxSelectBox from loosing its value when it isn't present in the items/dataSource list
    var XetSelectBox = (function (_super) {
        __extends(XetSelectBox, _super);
        function XetSelectBox() {
            _super.apply(this, arguments);
        }
        XetSelectBox.prototype._processDataSourceChanging = function () {
            this["_setListDataSource"]();
            this["_renderValue"]();
        };
        return XetSelectBox;
    })(dxui.dxSelectBox);
    AppPlayer.XetSelectBox = XetSelectBox;
    ;
    // Fixes crash when value contains a string (e.g. "$model.entity.CreatedOn)
    var dateInRange = dxdate.dateInRange;
    dxdate.dateInRange = function (date, min, max, format) {
        if (typeof date === "string") {
            return true;
        }
        else {
            return dateInRange(date, min, max, format);
        }
    };
    DevExpress.registerComponent("xetSelectBox", XetSelectBox);
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    ko.bindingHandlers["dxOptions"] = {
        update: function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor() || {});
            $.each(value, function (optionName, optionValue) {
                optionValue = ko.unwrap(optionValue) || 0;
                element["data-options"] = optionName + optionValue;
            });
        }
    };
    ko.bindingHandlers["dxPartialView"] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            //var view = ko.utils.unwrapObservable(valueAccessor() || {})["viewName"];
            $(element).append($("#xet-view").text());
        }
    };
    ko.bindingHandlers["themeCustomizer"] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            ko.computed(function () {
                var DYNAMIC_STYLES_ID = "dynamic-styles", css = valueAccessor().theme;
                if (css) {
                    $("#" + DYNAMIC_STYLES_ID).remove();
                    $("<style>" + css + "</style>")
                        .attr("type", "text/css")
                        .attr("id", DYNAMIC_STYLES_ID)
                        .appendTo("head");
                }
            });
        }
    };
    ko.bindingHandlers["xetScrollViewResetter"] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            valueAccessor()["reset"] = function () {
                $(element).find(".dx-scrollview").each(function (index, scrollViewElement) {
                    var scrollView = $(scrollViewElement).dxScrollView("instance");
                    scrollView.update();
                    scrollView.scrollTo(0);
                });
            };
        }
    };
    ko.bindingHandlers["debugger"] = {
        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            ko.unwrap(valueAccessor().track);
            /* tslint:disable: no-debugger */
            debugger;
            /* tslint:enable */
        }
    };
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var dxdata = DevExpress.data;
    var DataSource = (function () {
        function DataSource() {
        }
        DataSource.initDataObservables = function (srcData, observableSelectors) {
            if (!$.isPlainObject(srcData)) {
                return srcData;
            }
            var data = {};
            var descriptors = {};
            $.each(srcData, function (propertyName, value) {
                var descriptor = AppPlayer.Model.getDescriptor(value, propertyName, observableSelectors);
                descriptors[propertyName] = descriptor;
            });
            Object.defineProperties(data, descriptors);
            return data;
        };
        DataSource.createDataSource = function (dataSourceConfig, context, stores, application) {
            var _this = this;
            var dataSourceContext = $.extend({}, context, {
                callerType: "datasource initializer",
                callerId: dataSourceConfig.id
            }), calculatedFieldContext = $.extend({}, context), callerInfo = {
                callerType: "calculated field",
                callerId: ""
            }, dsConfig = AppPlayer.Model.createLinkedModel(dataSourceConfig, dataSourceContext, callerInfo);
            // TODO: Vitik OData navigation property scenario. 
            if (typeof dsConfig.store === "string") {
                dsConfig.store = stores[dataSourceConfig.store];
            }
            var map;
            if (dataSourceConfig.observables && dataSourceConfig.observables.length) {
                map = AppPlayer.continueFunc(map, function (data) {
                    return _this.initDataObservables(data, dataSourceConfig.observables);
                });
            }
            if (dataSourceConfig.calculatedFields && dataSourceConfig.calculatedFields.length) {
                map = AppPlayer.continueFunc(map, function (data) {
                    var functionCompilers = AppPlayer.Model.getFunctionCompilers(dataSourceConfig.calculatedFields, application);
                    Object.defineProperties(data, AppPlayer.Model.getPropertiesDescriptors(functionCompilers, $.extend({}, { $data: data }, calculatedFieldContext), callerInfo));
                    return data;
                });
                if (dsConfig.store && typeof dsConfig.store.on === "function") {
                    dsConfig.store.on("updating", function (key, values) {
                        dataSourceConfig.calculatedFields.forEach(function (field) {
                            delete values[field.name];
                        });
                    });
                    dsConfig.store.on("updated", function (key, values) {
                        var functionCompilers = AppPlayer.Model.getFunctionCompilers(dataSourceConfig.calculatedFields, application);
                        Object.defineProperties(values, AppPlayer.Model.getPropertiesDescriptors(functionCompilers, $.extend({}, { $data: values }, calculatedFieldContext), callerInfo));
                    });
                }
            }
            ;
            if (map) {
                dsConfig["map"] = map;
            }
            var dataSource = new dxdata.DataSource(dsConfig);
            // DataSource won't subscribe to observables. Do this for him.
            ko.computed(function () { return dsConfig.filter; }).subscribe(function (filter) {
                dataSource.filter(filter);
                if (dataSource["_xetLoadedAtLeastOnce"]) {
                    dataSource.load();
                }
            });
            ko.computed(function () { return dsConfig.sort; }).subscribe(function (sort) {
                dataSource.sort(sort);
                if (dataSource["_xetLoadedAtLeastOnce"]) {
                    dataSource.load();
                }
            });
            var originalLoad = dataSource.load.bind(dataSource);
            dataSource.load = function () {
                dataSource["_xetLoadedAtLeastOnce"] = true;
                return originalLoad();
            };
            if (dsConfig.loadOptions) {
                dataSource.on("customizeStoreLoadOptions", function (loadOptions) {
                    loadOptions.storeLoadOptions.urlOverride = dsConfig.loadOptions.url;
                });
            }
            dataSource["_calculatedFields"] = dataSourceConfig.calculatedFields;
            dataSource["_refreshOnViewShown"] = dataSourceConfig.refreshOnViewShown;
            dataSource["_monitor"] = dataSourceConfig.monitor;
            return dataSource;
        };
        return DataSource;
    })();
    AppPlayer.DataSource = DataSource;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var dxhtml = DevExpress.framework.html;
    var dx = DevExpress;
    var LayoutHelper = (function () {
        function LayoutHelper() {
        }
        LayoutHelper.tryGetCurrentPlatform = function (platforms, currentDevice) {
            currentDevice = currentDevice || dx.devices.current();
            var matchingPlatforms = DevExpress.utils["findBestMatches"](currentDevice, (platforms || []).map(function (platform, index) {
                return $.extend({ platformIndex: index }, platform.options);
            }));
            return matchingPlatforms.length ? platforms[matchingPlatforms[0].platformIndex] : undefined;
        };
        LayoutHelper.getLayoutController = function (platform, designMode) {
            var layoutNameToControllerMap = {
                navbar: "NavBarController",
                slideout: "SlideOutController",
                split: "IOSSplitLayoutController",
                simple: "SimpleLayoutController",
                empty: "EmptyLayoutController",
                popup: "PopupLayoutController",
                designer: "DesignerController"
            }, controllerName = layoutNameToControllerMap[platform.layout], controller;
            if (platform.layout === "split" && platform.options.generic) {
                controllerName = "GenericSplitLayoutController";
            }
            controller = (controllerName && dx.framework.html[controllerName]) ? new dx.framework.html[controllerName]({
                swipeEnabled: !designMode
            }) : new dxhtml.DefaultLayoutController({
                name: "desktop",
                swipeEnabled: !designMode
            });
            if (designMode && controller instanceof DevExpress.framework.html.SlideOutController) {
                controller._toggleNavigation = function () { };
            }
            return controller;
        };
        LayoutHelper.createLayoutSet = function (platforms, designMode, views) {
            var result = { layoutSet: [], viewSpecificLayouts: [] };
            platforms.forEach(function (platform) {
                result.layoutSet.push($.extend({ controller: LayoutHelper.getLayoutController(platform, designMode) }, platform.options || {}));
            });
            if (views) {
                views.forEach(function (view) {
                    if (!view.platforms) {
                        return;
                    }
                    view.platforms.forEach(function (platform) {
                        var controller = LayoutHelper.getLayoutController(platform, designMode);
                        if (platform && platform.modal) {
                            controller = new dxhtml["PopupLayoutController"]({ childController: controller });
                        }
                        result.layoutSet.push($.extend({ customResolveRequired: true, controller: controller }, platform.options || {}));
                        result.viewSpecificLayouts.push({
                            view: view.id,
                            options: platform.options,
                            controller: controller
                        });
                    });
                });
            }
            return result;
        };
        LayoutHelper.tryGetViewSpecificLayoutController = function (viewName, viewSpecificLayouts) {
            var foundController;
            if (viewSpecificLayouts.length > 0) {
                for (var i = 0; i < viewSpecificLayouts.length; ++i) {
                    var layoutItem = viewSpecificLayouts[i], fits = true, currentDevice = DevExpress.devices.current();
                    if (layoutItem.view === viewName) {
                        if (layoutItem.options) {
                            $.each(layoutItem.options, function (field, value) {
                                if (currentDevice[field] !== value) {
                                    return fits = false;
                                }
                            });
                        }
                        if (fits) {
                            foundController = layoutItem.controller;
                            break;
                        }
                    }
                }
            }
            return foundController;
        };
        LayoutHelper.getDeviceType = function (currentDevice) {
            var deviceType = "phone";
            currentDevice = currentDevice || DevExpress.devices.current();
            if (!currentDevice.tablet && !currentDevice.phone) {
                deviceType = "desktop";
            }
            else if (currentDevice.tablet) {
                deviceType = "tablet";
            }
            return deviceType;
        };
        LayoutHelper.fillCommandMapping = function (commandMapping, commands, platforms, currentDevice) {
            var deviceType = this.getDeviceType(currentDevice), currentPlatform = LayoutHelper.tryGetCurrentPlatform(platforms, currentDevice), map = {
                "header": [
                    "ios-header-toolbar",
                    //"android-header-toolbar",
                    //"android-simple-toolbar",
                    //"tizen-header-toolbar",
                    //"tizen-simple-toolbar",
                    "generic-header-toolbar",
                    "desktop-toolbar",
                ],
                "footer": [
                    "ios-view-footer",
                    //"android-footer-toolbar",
                    //"tizen-footer-toolbar",
                    "generic-view-footer",
                ],
                "toolbar": ["generic-layout-toolbar"],
                "none": []
            };
            (commands || []).forEach(function (command) {
                var container = command.container ? command.container[deviceType] : null;
                if (!container) {
                    container = (currentPlatform && currentPlatform.defaultCommandContainer) || "header";
                }
                var currentCommand = {
                    id: command.id
                }, platformContainers = map[container];
                if (command.alignment && command.alignment.hasOwnProperty(deviceType)) {
                    currentCommand["location"] = command.alignment[deviceType];
                }
                else {
                    currentCommand["location"] = (currentPlatform && currentPlatform.defaultCommandLocation) || "after";
                }
                if (!platformContainers) {
                    console.error("Unknown command container '" + container + "'. Supported values are: header, footer, toolbar");
                    return;
                }
                platformContainers.forEach(function (container) {
                    if (commandMapping[container]) {
                        commandMapping[container].commands.push(currentCommand);
                    }
                    else {
                        commandMapping[container] = { commands: [currentCommand] };
                    }
                });
            });
            return commandMapping;
        };
        return LayoutHelper;
    })();
    AppPlayer.LayoutHelper = LayoutHelper;
})(AppPlayer || (AppPlayer = {}));
/// <reference path="logic/functioncompiler.ts" />
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    ;
    var Model = (function () {
        function Model() {
        }
        Model.createAppModel = function (config, app) {
            var model = {}, context = { $global: model };
            return Model.createModelCore(config, app, context, "global ", model);
        };
        Model.createModel = function (config, app) {
            var model = {}, context = { $global: app["model"], $model: model };
            return Model.createModelCore(config, app, context, "", model);
        };
        Model.createModelCore = function (config, app, context, callerPrefix, model) {
            var allFields = [];
            if (config.params) {
                allFields.push.apply(allFields, config.params);
            }
            if (config.model) {
                allFields.push.apply(allFields, config.model);
            }
            if (config.functions) {
                allFields.push.apply(allFields, config.functions);
            }
            this.initializePlainTopLevelObservables(model, config.id, allFields, context, app);
            this.initializeCalculatedTopLevelObservables(model, allFields, context, callerPrefix, app);
            return model;
        };
        Model.createLinkedModel = function (options, context, callerInfo) {
            return AppPlayer.propertyVisitor(options, function (valueContext) {
                if (AppPlayer.endsWith(valueContext.name, "Expr")) {
                    return valueContext.value;
                }
                var expression = valueContext.value;
                if (expression && typeof expression === "string" && expression.charAt(0) === "$") {
                    var owner = valueContext.owner, propertyName = valueContext.name;
                    var value, modelValue = AppPlayer.getModelValue(expression, context, callerInfo);
                    if (typeof modelValue === "function") {
                        return valueContext.value;
                    }
                    if (valueContext.isArray) {
                        value = ko.computed(function () {
                            return owner[propertyName] = AppPlayer.getModelValue(expression, context, callerInfo);
                        });
                    }
                    else {
                        value = ko.computed(function () {
                            return AppPlayer.getModelValue(expression, context, callerInfo);
                        });
                        Object.defineProperty(owner, propertyName, {
                            enumerable: true,
                            configurable: true,
                            get: function () {
                                return value();
                            }
                        });
                    }
                    return;
                }
                return valueContext.value;
            });
        };
        Model.getFunctionCompilers = function (allFields, app) {
            var properties = [];
            allFields.forEach(function (item) {
                if (item.getter || item.setter || item.function) {
                    var result = {
                        name: item.name,
                        observables: item.observables,
                        getter: app.createFunctionCompiler(item.getter || item.function)
                    };
                    if (item.setter) {
                        result.setter = app.createFunctionCompiler(item.setter);
                    }
                    properties.push(result);
                }
            });
            return properties;
        };
        Model.getFunctionsDescriptors = function (functionCompilers, context, callerInformation) {
            var descriptors = {};
            functionCompilers.forEach(function (functionCompiler) {
                var callerInfo = {
                    callerType: callerInformation.callerType || "function",
                    callerId: callerInformation.callerId || functionCompiler.name
                }, func = function (args) { return functionCompiler.getter.run($.extend({}, context, args), callerInfo); }, descriptor = {
                    enumerable: true,
                    configurable: true,
                    get: function () { return func; }
                };
                descriptors[functionCompiler.name] = descriptor;
            });
            return descriptors;
        };
        Model.getPropertiesDescriptors = function (functionCompilers, context, callerInformation) {
            var _this = this;
            var descriptors = {};
            functionCompilers.forEach(function (functionCompiler) {
                var observable = ko.observable(), evaluated;
                var descriptor = {
                    enumerable: true,
                    configurable: true,
                    get: function () {
                        var callerInfo = {
                            callerType: callerInformation.callerType || "model property",
                            callerId: callerInformation.callerId || functionCompiler.name
                        };
                        if (!evaluated) {
                            ko.computed(function () {
                                functionCompiler.getter
                                    .run($.extend({}, context), callerInfo)
                                    .then(function (result) {
                                    var observedResult = _this.setObservableProperties(observable(), result, name, functionCompiler.observables);
                                    observable(observedResult);
                                });
                            });
                            evaluated = true;
                        }
                        return ko.unwrap(observable());
                    }
                };
                if (functionCompiler.setter) {
                    descriptor.set = function (value) {
                        var currentValue = observable();
                        if (currentValue === value) {
                            return;
                        }
                        if (ko.isObservable(currentValue)) {
                            console.error("Property cannot have a setter if getter returns observable.");
                            return;
                        }
                        functionCompiler.setter
                            .run($.extend({
                            $value: value
                        }, context));
                        var observedValue = _this.setObservableProperties(observable(), value, name, functionCompiler.observables);
                        observable(observedValue);
                    };
                }
                descriptors[functionCompiler.name] = descriptor;
            });
            return descriptors;
        };
        Model.processArrayMethodArguments = function (args, methodName, name, observableSelectors) {
            var newArguments;
            switch (methodName) {
                case "push":
                    newArguments = [];
                    for (var i = 0; i < args.length; ++i) {
                        newArguments.push(this.setObservableProperties(undefined, args[i], name, observableSelectors));
                    }
                    break;
                //TODO: all other method implementations - "reverse", "shift", "sort", "splice", "unshift"
                default:
                    break;
            }
            return newArguments;
        };
        Model.getObservableDescriptor = function (initialValue, name, observableSelectors) {
            var _this = this;
            var isArray = $.isArray(initialValue), observable = isArray ? ko.observableArray(initialValue) : ko.observable(initialValue);
            if (isArray) {
                ko.utils.arrayForEach(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (methodName) {
                    var originalMethod = initialValue[methodName];
                    initialValue[methodName] = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i - 0] = arguments[_i];
                        }
                        var processedArguments = _this.processArrayMethodArguments(args, methodName, name, observableSelectors), methodResult = originalMethod.apply(initialValue, processedArguments || args);
                        observable.valueHasMutated();
                        return methodResult;
                    };
                });
            }
            return {
                enumerable: true,
                configurable: true,
                get: function () {
                    return observable();
                },
                set: function (value) {
                    if (isArray && $.isArray(value)) {
                        observable.splice.apply(observable, [0, observable.peek().length].concat(value));
                    }
                    else {
                        observable(_this.setObservableProperties(observable(), value, name, observableSelectors));
                    }
                }
            };
        };
        Model.getPlainDescriptor = function (initialValue, name, observableSelectors) {
            var _this = this;
            var currentValue = initialValue;
            return {
                enumerable: true,
                configurable: true,
                get: function () {
                    return currentValue;
                },
                set: function (value) {
                    currentValue = _this.setObservableProperties(currentValue, value, name, observableSelectors);
                }
            };
        };
        Model.getDescriptor = function (initialValue, name, observableSelectors) {
            var nameParts = name.split("."), asterisk = "*";
            var shouldBeObservable = (observableSelectors || []).some(function (selector) {
                var selectorParts = selector.split("."), match = true;
                if (selectorParts.length < nameParts.length) {
                    match = selectorParts[selectorParts.length - 1] === asterisk;
                }
                else if (nameParts.length < selectorParts.length) {
                    match = false;
                }
                else {
                    for (var i = 0; i < nameParts.length; ++i) {
                        if (selectorParts[i] === asterisk) {
                            break;
                        }
                        else if (nameParts[i] === selectorParts[i]) {
                            continue;
                        }
                        else {
                            match = false;
                            break;
                        }
                    }
                }
                return match;
            });
            return shouldBeObservable
                ? this.getObservableDescriptor(initialValue, name, observableSelectors)
                : this.getPlainDescriptor(initialValue, name, observableSelectors);
        };
        Model.processArray = function (oldValue, newValue, parentName, observableSelectors) {
            var _this = this;
            var processedArray = [];
            $.each(newValue, function (index, childValue) {
                processedArray.push(_this.setObservableProperties(oldValue ? ko.unwrap(oldValue)[index] : undefined, childValue, parentName, observableSelectors));
            });
            return processedArray;
        };
        Model.setObservableProperties = function (oldValue, newValue, parentName, observableSelectors) {
            var _this = this;
            if (!observableSelectors || observableSelectors.length === 0) {
                return newValue;
            }
            if ($.isArray(newValue)) {
                return this.processArray(oldValue, newValue, parentName, observableSelectors);
            }
            else if ($.isPlainObject(newValue)) {
                var result = $.isPlainObject(oldValue) ? oldValue : {};
                // NOTE: remove properties from oldValue if not exist in newValue
                $.each(result, function (name, value) {
                    if (newValue[name] === undefined) {
                        delete result[name];
                    }
                });
                // NOTE: set existing or define non-existing properties
                var descriptors = {};
                $.each(newValue, function (propName, newPropValue) {
                    if (result[propName] === undefined) {
                        var currentName = parentName === "" ? propName : parentName + "." + propName;
                        var merged = _this.setObservableProperties(result[propName], newPropValue, currentName, observableSelectors);
                        descriptors[propName] = _this.getDescriptor(merged, currentName, observableSelectors);
                    }
                    else {
                        result[propName] = newPropValue;
                    }
                });
                Object.defineProperties(result, descriptors);
                return result;
            }
            return newValue;
        };
        Model.initializePlainTopLevelObservables = function (model, modelId, allFields, context, app) {
            var _this = this;
            var descriptors = {};
            allFields.forEach(function (item) {
                if (!item.getter) {
                    var isDefaultLoaded = false, observable = item.isArray ? ko.observableArray() : ko.observable(), setter = function (val) {
                        var newValue = _this.setObservableProperties(undefined, val, "", item.observables);
                        if (isDefaultLoaded && item.persistent) {
                            app.localStorage.put(modelId, item.name, val);
                        }
                        observable(newValue);
                    }, getter = function () {
                        //if(valueCompiler) {
                        //    valueCompiler.run($.extend({}, context, {
                        //        callerType: "model property's default value expression",
                        //        callerId: item.name
                        //    }))
                        //        .then((value) => {
                        //        setter(value);
                        //    });
                        //    valueCompiler = null;
                        //}
                        return observable();
                    };
                    if (item.defaultValue !== undefined) {
                        setter(AppPlayer.clone(item.defaultValue));
                    }
                    else {
                        setter(42); // TODO: defaultValue should depend on type
                    }
                    isDefaultLoaded = true;
                    if (item.persistent) {
                        var localValue = app.localStorage.get(modelId, item.name);
                        if (typeof localValue !== "undefined") {
                            observable(localValue);
                        }
                    }
                    descriptors[item.name] = {
                        enumerable: true,
                        configurable: true,
                        get: getter,
                        set: setter
                    };
                }
            });
            Object.defineProperties(model, descriptors);
        };
        Model.initializeCalculatedTopLevelObservables = function (model, allFields, context, callerPrefix, app) {
            var calculatedPropertyCompilers = this.getFunctionCompilers(allFields.filter(function (f) { return !!(f.getter || f.setter); }), app), functionCompilers = this.getFunctionCompilers(allFields.filter(function (f) { return !!f.function; }), app);
            Object.defineProperties(model, this.getPropertiesDescriptors(calculatedPropertyCompilers, context, { callerType: callerPrefix + "model property", callerId: "" }));
            Object.defineProperties(model, this.getFunctionsDescriptors(functionCompilers, context, { callerType: callerPrefix + "function", callerId: "" }));
        };
        Model.initializeDataSources = function (model, context, app, stores, reuseObservables, dataSourceConfigs) {
            var _this = this;
            var descriptors = {};
            (dataSourceConfigs || []).forEach(function (dataSourceConfig) {
                var dataSource = AppPlayer.DataSource.createDataSource(dataSourceConfig, context, stores, app);
                dataSource.on("loadError", function (error) {
                    if (error && error.message === "Unauthorized") {
                        return; // Suppress "Unauthorized" banners since the user will be still redirected to the login page and it won't add any meaning
                    }
                    AppPlayer.showErrorDialog(error, dataSourceConfig.id);
                });
                if (reuseObservables) {
                    model[dataSourceConfig.id].dispose();
                    model[dataSourceConfig.id] = new DevExpress.data.DataSource([{}]);
                    model[dataSourceConfig.id].load().then(function () {
                        model[dataSourceConfig.id].dispose();
                        model[dataSourceConfig.id] = dataSource;
                    });
                }
                descriptors[dataSourceConfig.id] = _this.getDescriptor(dataSource, dataSourceConfig.id, [dataSourceConfig.id]);
            });
            if (!reuseObservables) {
                Object.defineProperties(model, descriptors);
            }
        };
        return Model;
    })();
    AppPlayer.Model = Model;
})(AppPlayer || (AppPlayer = {}));
/*! LAB.js (LABjs :: Loading And Blocking JavaScript)
   v2.0.3 (c) Kyle Simpson
   MIT License
*/
/* tslint:disable */
(function (o) { var K = o.$LAB, y = "UseLocalXHR", z = "AlwaysPreserveOrder", u = "AllowDuplicates", A = "CacheBust", B = "BasePath", C = /^[^?#]*\//.exec(location.href)[0], D = /^\w+\:\/\/\/?[^\/]+/.exec(C)[0], i = document.head || document.getElementsByTagName("head"), L = (o.opera && Object.prototype.toString.call(o.opera) == "[object Opera]") || ("MozAppearance" in document.documentElement.style), q = document.createElement("script"), E = typeof q.preload == "boolean", r = E || (q.readyState && q.readyState == "uninitialized"), F = !r && q.async === true, M = !r && !F && !L; function G(a) { return Object.prototype.toString.call(a) == "[object Function]"; } function H(a) { return Object.prototype.toString.call(a) == "[object Array]"; } function N(a, c) { var b = /^\w+\:\/\//; if (/^\/\/\/?/.test(a)) {
    a = location.protocol + a;
}
else if (!b.test(a) && a.charAt(0) != "/") {
    a = (c || "") + a;
} return b.test(a) ? a : ((a.charAt(0) == "/" ? D : C) + a); } function s(a, c) { for (var b in a) {
    if (a.hasOwnProperty(b)) {
        c[b] = a[b];
    }
} return c; } function O(a) { var c = false; for (var b = 0; b < a.scripts.length; b++) {
    if (a.scripts[b].ready && a.scripts[b].exec_trigger) {
        c = true;
        a.scripts[b].exec_trigger();
        a.scripts[b].exec_trigger = null;
    }
} return c; } function t(a, c, b, d) { a.onload = a.onreadystatechange = function () { if ((a.readyState && a.readyState != "complete" && a.readyState != "loaded") || c[b])
    return; a.onload = a.onreadystatechange = null; d(); }; } function I(a) { a.ready = a.finished = true; for (var c = 0; c < a.finished_listeners.length; c++) {
    a.finished_listeners[c]();
} a.ready_listeners = []; a.finished_listeners = []; } function P(d, f, e, g, h) { setTimeout(function () { var a, c = f.real_src, b; if ("item" in i) {
    if (!i[0]) {
        setTimeout(arguments.callee, 25);
        return;
    }
    i = i[0];
} a = document.createElement("script"); if (f.type)
    a.type = f.type; if (f.charset)
    a.charset = f.charset; if (h) {
    if (r) {
        e.elem = a;
        if (E) {
            a.preload = true;
            a.onpreload = g;
        }
        else {
            a.onreadystatechange = function () { if (a.readyState == "loaded")
                g(); };
        }
        a.src = c;
    }
    else if (h && c.indexOf(D) == 0 && d[y]) {
        b = new XMLHttpRequest();
        b.onreadystatechange = function () { if (b.readyState == 4) {
            b.onreadystatechange = function () { };
            e.text = b.responseText + "\n//@ sourceURL=" + c;
            g();
        } };
        b.open("GET", c);
        b.send();
    }
    else {
        a.type = "text/cache-script";
        t(a, e, "ready", function () { i.removeChild(a); g(); });
        a.src = c;
        i.insertBefore(a, i.firstChild);
    }
}
else if (F) {
    a.async = false;
    t(a, e, "finished", g);
    a.src = c;
    i.insertBefore(a, i.firstChild);
}
else {
    t(a, e, "finished", g);
    a.src = c;
    i.insertBefore(a, i.firstChild);
} }, 0); } function J() { var l = {}, Q = r || M, n = [], p = {}, m; l[y] = true; l[z] = false; l[u] = false; l[A] = false; l[B] = ""; function R(a, c, b) { var d; function f() { if (d != null) {
    d = null;
    I(b);
} } if (p[c.src].finished)
    return; if (!a[u])
    p[c.src].finished = true; d = b.elem || document.createElement("script"); if (c.type)
    d.type = c.type; if (c.charset)
    d.charset = c.charset; t(d, b, "finished", f); if (b.elem) {
    b.elem = null;
}
else if (b.text) {
    d.onload = d.onreadystatechange = null;
    d.text = b.text;
}
else {
    d.src = c.real_src;
} i.insertBefore(d, i.firstChild); if (b.text) {
    f();
} } function S(c, b, d, f) { var e, g, h = function () { b.ready_cb(b, function () { R(c, b, e); }); }, j = function () { b.finished_cb(b, d); }; b.src = N(b.src, c[B]); b.real_src = b.src + (c[A] ? ((/\?.*$/.test(b.src) ? "&_" : "?_") + ~~(Math.random() * 1E9) + "=") : ""); if (!p[b.src])
    p[b.src] = { items: [], finished: false }; g = p[b.src].items; if (c[u] || g.length == 0) {
    e = g[g.length] = { ready: false, finished: false, ready_listeners: [h], finished_listeners: [j] };
    P(c, b, e, ((f) ? function () { e.ready = true; for (var a = 0; a < e.ready_listeners.length; a++) {
        e.ready_listeners[a]();
    } e.ready_listeners = []; } : function () { I(e); }), f);
}
else {
    e = g[0];
    if (e.finished) {
        j();
    }
    else {
        e.finished_listeners.push(j);
    }
} } function v() { var e, g = s(l, {}), h = [], j = 0, w = false, k; function T(a, c) { a.ready = true; a.exec_trigger = c; x(); } function U(a, c) { a.ready = a.finished = true; a.exec_trigger = null; for (var b = 0; b < c.scripts.length; b++) {
    if (!c.scripts[b].finished)
        return;
} c.finished = true; x(); } function x() { while (j < h.length) {
    if (G(h[j])) {
        try {
            h[j++]();
        }
        catch (err) { }
        continue;
    }
    else if (!h[j].finished) {
        if (O(h[j]))
            continue;
        break;
    }
    j++;
} if (j == h.length) {
    w = false;
    k = false;
} } function V() { if (!k || !k.scripts) {
    h.push(k = { scripts: [], finished: true });
} } e = { script: function () { for (var f = 0; f < arguments.length; f++) {
        (function (a, c) { var b; if (!H(a)) {
            c = [a];
        } for (var d = 0; d < c.length; d++) {
            V();
            a = c[d];
            if (G(a))
                a = a();
            if (!a)
                continue;
            if (H(a)) {
                b = [].slice.call(a);
                b.unshift(d, 1);
                [].splice.apply(c, b);
                d--;
                continue;
            }
            if (typeof a == "string")
                a = { src: a };
            a = s(a, { ready: false, ready_cb: T, finished: false, finished_cb: U });
            k.finished = false;
            k.scripts.push(a);
            S(g, a, k, (Q && w));
            w = true;
            if (g[z])
                e.wait();
        } })(arguments[f], arguments[f]);
    } return e; }, wait: function () { if (arguments.length > 0) {
        for (var a = 0; a < arguments.length; a++) {
            h.push(arguments[a]);
        }
        k = h[h.length - 1];
    }
    else
        k = false; x(); return e; } }; return { script: e.script, wait: e.wait, setOptions: function (a) { s(a, g); return e; } }; } m = { setGlobalDefaults: function (a) { s(a, l); return m; }, setOptions: function () { return v().setOptions.apply(null, arguments); }, script: function () { return v().script.apply(null, arguments); }, wait: function () { return v().wait.apply(null, arguments); }, queueScript: function () { n[n.length] = { type: "script", args: [].slice.call(arguments) }; return m; }, queueWait: function () { n[n.length] = { type: "wait", args: [].slice.call(arguments) }; return m; }, runQueue: function () { var a = m, c = n.length, b = c, d; for (; --b >= 0;) {
        d = n.shift();
        a = a[d.type].apply(null, d.args);
    } return a; }, noConflict: function () { o.$LAB = K; return m; }, sandbox: function () { return J(); } }; return m; } o.$LAB = J(); (function (a, c, b) { if (document.readyState == null && document[a]) {
    document.readyState = "loading";
    document[a](c, b = function () { document.removeEventListener(c, b, false); document.readyState = "complete"; }, false);
} })("addEventListener", "DOMContentLoaded"); })(this);
/* tslint:enable */
/**
 * (c) http://www.xenarius.net - Mobile applications for your data, built without coding.
 */
var Bootstrapper;
(function (Bootstrapper_1) {
    "use strict";
    var SimpleDeferred = (function () {
        function SimpleDeferred() {
            this.callbacks = [];
            this.isResolved = false;
        }
        SimpleDeferred.prototype.resolve = function () {
            this.isResolved = true;
            this.callbacks.forEach(function (callback) {
                callback();
            });
        };
        SimpleDeferred.prototype.done = function (callback) {
            if (this.isResolved) {
                callback();
            }
            else {
                this.callbacks.push(callback);
            }
        };
        return SimpleDeferred;
    })();
    Bootstrapper_1.SimpleDeferred = SimpleDeferred;
    var TaskProgressReporter = (function () {
        function TaskProgressReporter(approximateCount, onProgress, onTotalComplete) {
            if (approximateCount === void 0) { approximateCount = 0; }
            if (onProgress === void 0) { onProgress = function (progress) { }; }
            if (onTotalComplete === void 0) { onTotalComplete = function () { }; }
            this.approximateCount = approximateCount;
            this.onProgress = onProgress;
            this.onTotalComplete = onTotalComplete;
            this.completedCount = 0;
            this.realCount = 0;
            this.totalCount = 0;
            this.totalCount = approximateCount;
        }
        TaskProgressReporter.prototype.enqueue = function (count) {
            if (count === void 0) { count = 1; }
            this.realCount += count;
            if (this.realCount > this.totalCount) {
                this.totalCount = this.realCount;
                this.update();
            }
        };
        TaskProgressReporter.prototype.report = function (count) {
            if (count === void 0) { count = 1; }
            this.completedCount += count;
            this.update();
        };
        TaskProgressReporter.prototype.clear = function () {
            this.realCount = this.completedCount = this.totalCount = 0;
        };
        TaskProgressReporter.prototype.getCurrentProgress = function () {
            return this.completedCount * 100 / this.totalCount;
        };
        TaskProgressReporter.prototype.areTotalCompleted = function () {
            return this.completedCount === this.totalCount;
        };
        TaskProgressReporter.prototype.update = function () {
            //console.log([this.completedCount, this.realCount, this.totalCount])
            this.onProgress(this.getCurrentProgress());
            if (this.areTotalCompleted()) {
                this.onTotalComplete();
            }
        };
        return TaskProgressReporter;
    })();
    Bootstrapper_1.TaskProgressReporter = TaskProgressReporter;
    var Bootstrapper = (function () {
        function Bootstrapper(progressReporter) {
            if (progressReporter === void 0) { progressReporter = new TaskProgressReporter(); }
            this.progressReporter = progressReporter;
            this.lab = window["$LAB"];
        }
        Bootstrapper.prototype.get = function (url, done, fail) {
            if (typeof $ !== "undefined" && $.get) {
                $.get(url).then(done, fail);
            }
            else {
                var request = new XMLHttpRequest();
                request.open("GET", url, true);
                request.onreadystatechange = function () {
                    if (this.readyState === 4) {
                        if (this.status >= 200 && this.status < 400) {
                            done(this.responseText);
                        }
                        else {
                            fail();
                        }
                    }
                };
                request.send();
            }
        };
        Bootstrapper.prototype.initHtmlElement = function (element, resource) {
            element.setAttribute("type", "text/html");
            if (resource.id) {
                element.setAttribute("id", resource.id);
            }
            if (resource.rel) {
                element.setAttribute("rel", resource.rel);
            }
        };
        Bootstrapper.prototype.appendHtml = function (parent, html) {
            var div = document.createElement("div");
            div.innerHTML = html;
            while (div.children.length) {
                var child = div.children[0];
                parent.appendChild(child);
            }
        };
        Bootstrapper.prototype.normalize = function (resources, rootPath) {
            var _this = this;
            return (resources || []).map(function (resource) {
                var res = typeof resource === "string" ? { src: resource, fileType: null, id: null } : resource, src = res.src.indexOf("http") === 0 ? res.src : rootPath + ("/" + res.src).replace("//", "/");
                res.src = _this.insertFingerprint(src);
                res.fileType = res.fileType || res.src.split(".").pop().toLocaleLowerCase();
                return res;
            });
        };
        Bootstrapper.prototype.bootstrapResource = function (resource, onload) {
            var _this = this;
            if (onload === void 0) { onload = function () { }; }
            var fileref, onerror = function () { console.error("Could not load file: " + resource.src); };
            if (resource.fileType === "html") {
                if (resource.rel === "dx-template") {
                    fileref = document.createElement("link");
                    fileref.href = resource.src;
                    this.initHtmlElement(fileref, resource);
                    document.head.appendChild(fileref);
                    onload();
                }
                else {
                    this.get(resource.src, function (tmpl) {
                        if (tmpl.indexOf("type='text/html'") !== -1 || tmpl.indexOf("type=\"text/html\"") !== -1) {
                            if (resource.rel) {
                                var div = document.createElement("div");
                                div.style.display = "none";
                                div.innerHTML = tmpl;
                                document.body.appendChild(div);
                            }
                            else {
                                _this.appendHtml(document.body, tmpl);
                            }
                        }
                        else {
                            var fileref = document.createElement("script");
                            fileref.text = tmpl;
                            _this.initHtmlElement(fileref, resource);
                            document.body.appendChild(fileref);
                        }
                        onload();
                    }, onerror);
                }
            }
            else {
                if (resource.fileType === "js") {
                    this.lab = this.lab.script(resource.src).wait(onload);
                }
                else if (resource.fileType === "css") {
                    fileref = document.createElement("link");
                    fileref.setAttribute("rel", "stylesheet");
                    fileref.setAttribute("type", "text/css");
                    fileref.setAttribute("href", resource.src);
                    fileref.onload = onload;
                    fileref.onerror = onerror;
                    document.head.appendChild(fileref);
                }
                else {
                    console.error("Unsupported file type: %o", resource);
                    return;
                }
            }
        };
        Bootstrapper.prototype.insertFingerprint = function (path) {
            if (Bootstrapper_1.resourceFingerprint) {
                var index = path.lastIndexOf("/");
                index = path.indexOf(".", index);
                return path.substring(0, index) + Bootstrapper_1.resourceFingerprint + path.substring(index);
            }
            else {
                return path;
            }
        };
        Bootstrapper.prototype.bootstrap = function (resources, rootPath) {
            var _this = this;
            if (rootPath === void 0) { rootPath = ""; }
            var result = new SimpleDeferred(), filesCount = resources.length;
            this.progressReporter.enqueue(filesCount);
            this.normalize(resources, rootPath).forEach(function (file) {
                _this.bootstrapResource(file, function () {
                    _this.progressReporter.report();
                    if (!--filesCount) {
                        result.resolve();
                    }
                });
            });
            return result;
        };
        return Bootstrapper;
    })();
    Bootstrapper_1.Bootstrapper = Bootstrapper;
})(Bootstrapper || (Bootstrapper = {}));
/// <reference path="../../bootstrapper/ts/bootstrapper.ts" />
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    var ModuleBase = (function () {
        function ModuleBase(application) {
            this._application = application;
        }
        return ModuleBase;
    })();
    AppPlayer.ModuleBase = ModuleBase;
    var ModulesLoader = (function (_super) {
        __extends(ModulesLoader, _super);
        function ModulesLoader(application, progressRepoter) {
            _super.call(this, progressRepoter);
            this._application = application;
            this.alreadyLoadedModules = [];
        }
        ModulesLoader.prototype._initModule = function (moduleVarName) {
            var _this = this;
            var _module = AppPlayer.compileGetter(moduleVarName)(window);
            if (_module) {
                if (_module.functions && this._application) {
                    _module.functions.forEach(function (funcDeclaration) {
                        _this._application.functions[funcDeclaration.id] = funcDeclaration.func;
                    });
                }
                if (_module.createModule) {
                    _module.createModule(this._application);
                }
            }
            this.alreadyLoadedModules.push(moduleVarName.src || moduleVarName);
        };
        ModulesLoader.prototype.initModules = function (modulesConfig) {
            var _this = this;
            var result = $.Deferred();
            //var modulesConfig = modules || this._application && this._application.appConfig.modules;
            if (modulesConfig) {
                var promises = modulesConfig.map(function (moduleInfo) {
                    var ajaxResult = $.Deferred();
                    var rootModuleUrl = moduleInfo.src || moduleInfo;
                    $.getJSON(rootModuleUrl + "/" + _this.insertFingerprint(ModulesLoader.MODULEFILENAME)).done(function (moduleItem) {
                        _this.loadModule(rootModuleUrl, moduleItem).done(function () {
                            ajaxResult.resolve();
                        });
                    }).fail(function (error) {
                        ajaxResult.reject(error);
                    });
                    return ajaxResult;
                });
                $.when.apply($, promises).done(function () {
                    result.resolve();
                });
            }
            else {
                result.resolve();
            }
            return result.promise();
        };
        ModulesLoader.prototype.loadModule = function (rootPath, moduleItem) {
            var _this = this;
            var result = $.Deferred();
            this.bootstrap(moduleItem.files, rootPath).done(function () {
                if (moduleItem.namespace && _this.alreadyLoadedModules.indexOf(moduleItem.namespace) === -1) {
                    _this._initModule(moduleItem.namespace);
                }
                result.resolve();
            });
            return result;
        };
        ModulesLoader.MODULEFILENAME = "module.json";
        return ModulesLoader;
    })(Bootstrapper.Bootstrapper);
    AppPlayer.ModulesLoader = ModulesLoader;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    var Styles;
    (function (Styles) {
        "use strict";
    })(Styles = AppPlayer.Styles || (AppPlayer.Styles = {}));
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    function bracketsToDots(expr) {
        return expr.replace(/\[/g, ".").replace(/\]/g, "");
    }
    ;
    function getModelValue(expr, runContext, callerInfo) {
        return executeModelSpecificAccessor(expr, runContext, callerInfo, function (specificModel, value) {
            return compileGetter(value)(specificModel);
        });
    }
    AppPlayer.getModelValue = getModelValue;
    ;
    function executeModelSpecificAccessor(expr, runContext, callerInfo, accessor) {
        var isNegative = expr.charAt(0) === "!", absExpr = isNegative ? expr.substring(1) : expr, pointIndex = absExpr.indexOf("."), rootPropertyName = absExpr.substring(0, pointIndex) || absExpr, valuePath = pointIndex === -1 ? "" : absExpr.substring(pointIndex + 1);
        return runContext[rootPropertyName] ? accessor(runContext[rootPropertyName], valuePath, isNegative) : expr;
    }
    function compileGetter(expr) {
        if (!expr) {
            return function (obj) { return ko.unwrap(obj); };
        }
        expr = bracketsToDots(expr);
        var path = expr.split(".");
        return function (obj) {
            var current = ko.unwrap(obj);
            path.forEach(function (name, index) {
                if (!current) {
                    return false;
                }
                var next = index !== path.length - 1 ? ko.unwrap(current[name]) : current[name];
                current = next;
            });
            return ko.unwrap(current);
        };
    }
    AppPlayer.compileGetter = compileGetter;
    ;
    AppPlayer.compileSetter = DevExpress.data.utils.compileSetter;
    function getQueryVariable(variable) {
        var query = window.location.search.substring(1);
        var vars = query.split("&");
        for (var i = 0; i < vars.length; i++) {
            var eqIndex = vars[i].indexOf("="), name = vars[i].slice(0, eqIndex), value = vars[i].slice(eqIndex + 1);
            if (name === variable) {
                return value;
            }
        }
        return null;
    }
    AppPlayer.getQueryVariable = getQueryVariable;
    ;
    function wrapModelReference(value, runContext, callerInfo) {
        return executeModelSpecificAccessor(value, runContext, callerInfo, function (specificModel, expression, negative) {
            return wrapReferenceField(specificModel, expression, negative);
        });
    }
    AppPlayer.wrapModelReference = wrapModelReference;
    function wrapReferenceField(model, val, negative) {
        var getter, setter, writeNotifier = ko.observable(), read, descriptor;
        if (val) {
            descriptor = Object.getOwnPropertyDescriptor(model, val);
            getter = compileGetter(val);
            if (!descriptor || descriptor.set || descriptor.writable) {
                setter = AppPlayer.compileSetter(val);
            }
        }
        else {
            getter = function () { return model; };
        }
        read = function () {
            ko.unwrap(writeNotifier);
            return negative ? !getter(model) : getter(model);
        };
        return ko.computed(setter ? {
            read: read,
            write: function (value) {
                setter(model, negative ? !value : value);
                writeNotifier.valueHasMutated();
            }
        } : { read: read });
    }
    ;
    function propertyVisitor(target, valueCallback, initialContext) {
        if (typeof target === "string") {
            return target;
        }
        var context = initialContext || { getValueCallback: function (value, context) { return propertyVisitor(value, valueCallback, context); } }, isArray = Array.isArray(target), result = isArray ? [] : {};
        context.path = context.path || "";
        $.each(target, function (name, value) {
            context.name = name;
            context.value = value;
            context.isArray = isArray;
            context.owner = result;
            if (Array.isArray(value) || $.isPlainObject(value)) {
                var oldPath = context.path;
                context.path = context.path ? context.path + (context.isArray ? "[" + context.name + "]" : "." + context.name) : context.name;
                result[name] = context.getValueCallback(value, context);
                context.path = oldPath;
            }
            else {
                var newVal = valueCallback(context);
                if (newVal !== undefined) {
                    result[name] = newVal;
                }
            }
        });
        return result;
    }
    AppPlayer.propertyVisitor = propertyVisitor;
    var BindingStringMaker = (function () {
        function BindingStringMaker() {
        }
        BindingStringMaker.valueCallback = function (result, context) {
            var value = context.value;
            return context.name + ": " + value + ",";
        };
        BindingStringMaker.arrayValueCallback = function (result, context) {
            return context.value + ",";
        };
        BindingStringMaker.makeString = function (model, isArray) {
            if (isArray === void 0) { isArray = false; }
            var result = "", context = {
                getValueCallback: function (value, context) {
                    if ($.isArray(value)) {
                        if (isArray) {
                            result += "[" + BindingStringMaker.makeString(value, true) + "],";
                        }
                        else {
                            result += context.name + ": " + "[" + BindingStringMaker.makeString(value, true) + "],";
                        }
                    }
                    else {
                        if (isArray) {
                            result += "{" + BindingStringMaker.makeString(value, false) + "},";
                        }
                        else {
                            result += context.name + ": " + "{" + BindingStringMaker.makeString(value, false) + "},";
                        }
                    }
                }
            };
            if (isArray) {
                propertyVisitor(model, function (context) {
                    result += BindingStringMaker.arrayValueCallback(result, context);
                }, context);
            }
            else {
                propertyVisitor(model, function (context) {
                    result += BindingStringMaker.valueCallback(result, context);
                }, context);
            }
            return result.slice(0, -1);
        };
        return BindingStringMaker;
    })();
    AppPlayer.BindingStringMaker = BindingStringMaker;
    function replaceAll(str, token, newToken) {
        return str.split(token).join(newToken);
    }
    AppPlayer.replaceAll = replaceAll;
    function startsWith(str, token) {
        if (token.length > str.length) {
            return false;
        }
        else if (token.length === str.length) {
            return token === str;
        }
        else {
            return str.substr(0, token.length) === token;
        }
    }
    AppPlayer.startsWith = startsWith;
    function endsWith(str, token) {
        if (typeof str !== "string" || typeof token !== "string") {
            return false;
        }
        if (token.length > str.length) {
            return false;
        }
        else if (token.length === str.length) {
            return token === str;
        }
        else {
            if (token.length === 1) {
                return str.charAt(str.length - 1) === token;
            }
            else {
                return str.substr(str.length - token.length, token.length) === token;
            }
        }
    }
    AppPlayer.endsWith = endsWith;
    function findInArray(array, predicate) {
        var index = indexInArray(array, predicate);
        return index >= 0 ? array[index] : null;
    }
    AppPlayer.findInArray = findInArray;
    function indexInArray(array, predicate) {
        if (array) {
            for (var i = 0; i < array.length; i++) {
                if (predicate(array[i])) {
                    return i;
                }
            }
        }
        return -1;
    }
    AppPlayer.indexInArray = indexInArray;
    function addHeaders(headers) {
        var result = function (request) { };
        if (headers && headers.length) {
            result = function (request) {
                headers.forEach(function (header) {
                    request.headers = request.headers || {};
                    request.headers[header.name] = header.value;
                });
            };
        }
        return result;
    }
    AppPlayer.addHeaders = addHeaders;
    function clone(value) {
        var key, result;
        if (value instanceof Date) {
            return new Date(value.getTime());
        }
        else if (value && (value instanceof Object)) {
            result = Array.isArray(value) ? [] : {};
            for (key in value) {
                if (value.hasOwnProperty(key)) {
                    result[key] = clone(value[key]);
                }
            }
            return result;
        }
        else {
            return value;
        }
    }
    AppPlayer.clone = clone;
    function extract(config, field) {
        var target, leftover = {};
        if (config) {
            for (var currentField in config) {
                if (currentField === field) {
                    target = config[currentField];
                }
                else {
                    leftover[currentField] = config[currentField];
                }
            }
        }
        return {
            target: target,
            leftover: leftover
        };
    }
    AppPlayer.extract = extract;
    function extractMany(config, fields) {
        var target = {}, leftover = {};
        if (config) {
            for (var currentField in config) {
                if ($.inArray(currentField, fields) !== -1) {
                    target[currentField] = config[currentField];
                }
                else {
                    leftover[currentField] = config[currentField];
                }
            }
        }
        return {
            target: target,
            leftover: leftover
        };
    }
    AppPlayer.extractMany = extractMany;
    function remap(config, map, passthrough) {
        var result = {};
        if (config) {
            for (var currentField in config) {
                if (map[currentField]) {
                    result[map[currentField]] = config[currentField];
                }
                else if (passthrough) {
                    result[currentField] = config[currentField];
                }
            }
        }
        return result;
    }
    AppPlayer.remap = remap;
    var ISO8601_DATE_REGEX = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z?$/;
    function parseISO8601(isoString) {
        var chunks = isoString.replace("Z", "").split("T"), date = String(chunks[0]).split("-"), time = String(chunks[1]).split(":");
        var year, month, day, hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
        year = Number(date[0]);
        month = Number(date[1]) - 1;
        day = Number(date[2]);
        if (time.length) {
            hours = Number(time[0]);
            minutes = Number(time[1]);
            seconds = Number(String(time[2]).split(".")[0]);
            milliseconds = Number(String(time[2]).split(".")[1]) || 0;
        }
        if (endsWith(isoString, "Z")) {
            return new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
        }
        else {
            return new Date(year, month, day, hours, minutes, seconds, milliseconds);
        }
    }
    AppPlayer.parseISO8601 = parseISO8601;
    function transformISODates(obj) {
        if (!obj) {
            return;
        }
        $.each(obj, function (key, value) {
            if (value !== null && typeof value === "object") {
                transformISODates(value);
            }
            else if (typeof value === "string") {
                if (ISO8601_DATE_REGEX.test(value)) {
                    obj[key] = new Date(parseISO8601(obj[key]).valueOf());
                }
            }
        });
    }
    AppPlayer.transformISODates = transformISODates;
    ;
    function parseDates(data, fields) {
        if (fields === void 0) { fields = []; }
        var isArray = Array.isArray(data), array = isArray ? data : [data];
        var parsed = array.map(function (item) {
            return typeof item === "string" && $.isEmptyObject(fields)
                ? new Date(parseISO8601(item).valueOf())
                : propertyVisitor(item, function (context) {
                    var fullPath = context.path && context.name && context.path + "." + context.name || context.path || context.name;
                    if (fields.indexOf(fullPath) !== -1 || $.isEmptyObject(fields)) {
                        return ISO8601_DATE_REGEX.test(context.value)
                            ? new Date(parseISO8601(context.value).valueOf())
                            : context.value;
                    }
                    return context.value;
                });
        });
        return isArray ? parsed : parsed[0];
    }
    AppPlayer.parseDates = parseDates;
    var LocalStorageWrapper = (function () {
        function LocalStorageWrapper(app) {
            this.app = app;
        }
        LocalStorageWrapper.prototype.put = function (modelId, id, val) {
            var key = this.getKey(modelId, id);
            if (val === undefined || val === null) {
                localStorage.removeItem(key);
            }
            else {
                localStorage.setItem(key, JSON.stringify(val));
            }
        };
        LocalStorageWrapper.prototype.get = function (modelId, id) {
            var key = this.getKey(modelId, id);
            var val = localStorage.getItem(key);
            return val ? JSON.parse(val) : undefined;
        };
        LocalStorageWrapper.prototype.getKey = function (modelId, id) {
            return this.getAppUserKey() + (modelId || "global") + "-" + id;
        };
        LocalStorageWrapper.prototype.getAppUserKey = function () {
            var appId = this.app.id ? this.app.id : "allapps";
            return "xet-ls-" + appId + "-";
        };
        return LocalStorageWrapper;
    })();
    AppPlayer.LocalStorageWrapper = LocalStorageWrapper;
    function handleOpenURL(url) {
        var uriIndex = url.indexOf("://"), paramsIndex = url.indexOf("?", uriIndex);
        var uri, params = {};
        if (paramsIndex >= 0) {
            uri = url.substring(uriIndex + 3, paramsIndex);
            var paramParts = url.substring(paramsIndex + 1).split("&");
            paramParts.forEach(function (part) {
                var equalIndex = part.indexOf("="), name, value;
                if (equalIndex < 0) {
                    params[part] = true;
                }
                else {
                    name = part.substring(0, equalIndex);
                    value = part.substr(equalIndex + 1);
                    params[name] = value;
                }
            });
        }
        else {
            uri = url.substr(uriIndex + 3);
        }
        // if app is open, redirect to the view provided
        // otherwise, save to a temporary variable
        if (window["app"] && window["app"].instance && window["app"].instance.dxapp) {
            var app = window["app"].instance;
            app.functions.navigateToView(uri, params, "master");
        }
        else {
            window["xetHandleOpenURL"] = {
                uri: uri,
                params: params
            };
        }
    }
    AppPlayer.handleOpenURL = handleOpenURL;
    function continueFunc(func, continulation) {
        if (func) {
            return function (arg) {
                var result = func(arg);
                return continulation(result);
            };
        }
        else {
            return continulation;
        }
    }
    AppPlayer.continueFunc = continueFunc;
    function showActionPopover(target, items, showCancelButton, title) {
        var $div = $("<div/>");
        $div.appendTo($(document.body));
        $div.dxActionSheet({
            dataSource: items,
            visible: true,
            title: title || "",
            showTitle: !!title,
            showCancelButton: showCancelButton,
            usePopover: true,
            target: target
        });
    }
    AppPlayer.showActionPopover = showActionPopover;
    function isPromise(value) {
        if (value == null || typeof value.then !== "function") {
            return false;
        }
        var promiseThenSrc = String($.Deferred().then);
        var valueThenSrc = String(value.then);
        return promiseThenSrc === valueThenSrc;
    }
    AppPlayer.isPromise = isPromise;
    function showErrorDialog(error, dataSourceId) {
        if (error === undefined) {
            return; // If byKey returns nothing, loadError handler is called. Suppress the warning.
        }
        var message = (typeof error === "string" || error instanceof String) ? error : (error && error.message) || "Unknown error";
        DevExpress.ui.notify({
            message: "",
            hideOnSwipe: false,
            contentTemplate: function () {
                var $res = $("<div class=\"dx-toast-message\" role=\"alert\"></div>"), hideToast = function () { $res.parents(".dx-toast").dxToast("instance").hide(); }, fullMessage = dataSourceId ? "'" + dataSourceId + "' data source error: " + message : message;
                $("<div/>").html(fullMessage).appendTo($res);
                if (message.indexOf("CORS") >= 0) {
                    var corsDoc = "https://xenarius.net/docs/cors.html";
                    $("<div/>").dxButton({
                        text: "Enable CORS",
                        type: "success",
                        onClick: function () {
                            hideToast();
                            window.open(corsDoc);
                        }
                    }).appendTo($res);
                }
                $("<div/>").dxButton({ text: "Dismiss", type: "danger", onClick: hideToast }).appendTo($res);
                return $res;
            }
        }, "error", 600000);
    }
    AppPlayer.showErrorDialog = showErrorDialog;
    function xmlToJs(node) {
        var data = {};
        // append a value
        function add(name, value) {
            if (data[name]) {
                if (data[name].constructor !== Array) {
                    data[name] = [data[name]];
                }
                data[name][data[name].length] = value;
            }
            else {
                data[name] = value;
            }
        }
        ;
        // element attributes
        var c, cn;
        for (c = 0; cn = node.attributes[c]; c++) {
            add(cn.name, cn.value);
        }
        // child elements
        for (c = 0; cn = node.childNodes[c]; c++) {
            if (cn.nodeType === 1) {
                if (cn.childNodes.length === 1 && cn.firstChild.nodeType === 3) {
                    // text value
                    add(cn.nodeName, cn.firstChild.nodeValue);
                }
                else {
                    // sub-object
                    add(cn.nodeName, xmlToJs(cn));
                }
            }
        }
        return data;
    }
    AppPlayer.xmlToJs = xmlToJs;
})(AppPlayer || (AppPlayer = {}));
/// <template path="../../AppPlayer/Templates/ViewComponents.html"/>
var AppPlayer;
(function (AppPlayer) {
    var Views;
    (function (Views) {
        "use strict";
        var eventCounter = 1;
        var DefaultsProvider = (function () {
            function DefaultsProvider() {
            }
            DefaultsProvider.GetDefaults = function (config) {
                return config.type && Views.componentInfos[config.type] && Views.componentInfos[config.type].defaults ? Views.componentInfos[config.type].defaults : {};
            };
            return DefaultsProvider;
        })();
        Views.DefaultsProvider = DefaultsProvider;
        var ComponentMarkupRenderBase = (function () {
            function ComponentMarkupRenderBase(config, options) {
                this.options = {};
                this.options = $.extend({}, { designMode: false, defaultsGetter: DefaultsProvider.GetDefaults }, options);
                this.config = $.extend(true, {}, this.options.defaultsGetter(config), config);
            }
            ComponentMarkupRenderBase.prototype._getModelObject = function (modelConfig, app) {
                return this.patchConfig(modelConfig || this.config, app);
            };
            ComponentMarkupRenderBase.prototype._getBindnigStringObject = function (modelObject) {
                var result = $.extend({}, modelObject);
                delete result["type"];
                return result;
            };
            ComponentMarkupRenderBase.prototype.getModel = function (app, modelConfig) {
                var modelObject = this._getModelObject(modelConfig || this.config, app), self = this, model = {
                    model: modelObject,
                    get bindingString() {
                        return AppPlayer.BindingStringMaker.makeString(self._getBindnigStringObject(modelObject));
                    }
                };
                var customStyle = model.model["style"] && model.model["style"].customCss || {};
                for (var item in customStyle) {
                    if (!model.model["style"][item] && customStyle[item] !== "") {
                        model.model["style"][item] = customStyle[item];
                    }
                }
                return model;
            };
            ComponentMarkupRenderBase.prototype._patchField = function (fieldValue) {
                if (typeof fieldValue === "string") {
                    fieldValue = "'" + fieldValue.replace(/'/g, "\\'") + "'";
                }
                return fieldValue;
            };
            ComponentMarkupRenderBase.prototype._patchConfig = function (config, app) {
                return this.patchConfig({ config: config }, app).config;
            };
            ComponentMarkupRenderBase.prototype._patchEvents = function (componentConfig, componentInfo, app) {
                if (componentInfo.events) {
                    componentInfo.events.forEach(function (eventName) {
                        var event = componentConfig[eventName], fn, id, functionCompiler;
                        if (!event || !app || !app.createFunctionCompiler) {
                            return;
                        }
                        else {
                            functionCompiler = app.createFunctionCompiler(event);
                            fn = function (context) {
                                return functionCompiler.run($.extend({}, context), {
                                    callerType: "event of the " + componentConfig.id + "component",
                                    callerId: eventName
                                });
                            };
                            id = "anonymousEvent" + eventCounter++;
                            app.functions[id] = fn;
                            componentConfig[eventName] = id;
                        }
                    });
                }
            };
            ComponentMarkupRenderBase.prototype.patchConfig = function (config, app) {
                var _this = this;
                return AppPlayer.propertyVisitor(config, function (context) {
                    return _this.options.designMode || (context.name === "type") ? context.value : _this._patchField(context.value);
                }, {
                    getValueCallback: function (value) {
                        var componentInfo = value.type && Views.componentInfos[value.type];
                        if (componentInfo) {
                            _this._patchEvents(value, componentInfo, app);
                            return new componentInfo.rendererType(value, null).getModel(app);
                        }
                        else {
                            return _this.patchConfig(value, app);
                        }
                    }
                });
            };
            ComponentMarkupRenderBase.prototype._copyMargins = function (from, to) {
                if (from && to) {
                    to["marginTop"] = from["marginTop"];
                    to["marginRight"] = from["marginRight"];
                    to["marginBottom"] = from["marginBottom"];
                    to["marginLeft"] = from["marginLeft"];
                }
            };
            return ComponentMarkupRenderBase;
        })();
        Views.ComponentMarkupRenderBase = ComponentMarkupRenderBase;
        var ViewMarkupRenderer = (function (_super) {
            __extends(ViewMarkupRenderer, _super);
            function ViewMarkupRenderer(viewConfig, application) {
                _super.call(this, viewConfig, {});
                this.viewConfig = viewConfig;
                this.application = application;
            }
            ViewMarkupRenderer.prototype.getModel = function () {
                var model = _super.prototype.getModel.call(this, this.application).model;
                return {
                    model: model,
                    bindingString: AppPlayer.BindingStringMaker.makeString({
                        name: model.id,
                        title: model.title,
                        disableCache: model.disableCache,
                        pane: model.pane
                    })
                };
            };
            ViewMarkupRenderer.prototype.render = function () {
                var _this = this;
                var result, error;
                //dust["debugLevel"] = "DEBUG";
                dust["onLoad"] = function (name, callback) {
                    var template = document.getElementById(name);
                    if (!template) {
                        _this.application.registerMissingTemplate(name.substr("xet-dust-".length));
                    }
                    // TODO Pletnev remove || "!template with name " + name + " is not found!"
                    callback(null, template ? template.innerHTML : "!template with name " + name + " is not found!");
                };
                dust.render("xet-dust-view", this.getModel(), function (err, out) {
                    error = err;
                    result = out;
                });
                if (!result) {
                    throw new Error("Something went wrong during rendering of the '" + this.viewConfig.id + "' view markup. Error: \n" + error);
                }
                return result;
            };
            return ViewMarkupRenderer;
        })(ComponentMarkupRenderBase);
        Views.ViewMarkupRenderer = ViewMarkupRenderer;
        var BoxMarkupRender = (function (_super) {
            __extends(BoxMarkupRender, _super);
            function BoxMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            BoxMarkupRender.prototype.getModel = function (app) {
                var componentsAndWidget = AppPlayer.extract(this.config, "components"), model = {
                    type: this.config.type,
                    box: _super.prototype.getModel.call(this, app, componentsAndWidget.leftover),
                    components: this._patchConfig(componentsAndWidget.target, app)
                };
                return {
                    model: model,
                    bindingString: model.box.bindingString
                };
            };
            return BoxMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.BoxMarkupRender = BoxMarkupRender;
        var ContainerMarkupRender = (function (_super) {
            __extends(ContainerMarkupRender, _super);
            function ContainerMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            ContainerMarkupRender.prototype.getModel = function (app) {
                var _this = this;
                var contentAndContainerStyles = AppPlayer.extractMany(this.config.style, ["verticalAlign", "maxWidth"]), config = $.extend({}, this.config, {
                    container: {
                        containerStyle: AppPlayer.remap(contentAndContainerStyles.leftover, { horizontalAlign: "textAlign" }, true),
                        contentStyle: contentAndContainerStyles.target
                    }
                }), componentsAndContainer = AppPlayer.extract(config, "components");
                this._copyMargins(this.config.style, config.container.containerStyle);
                var model = {
                    type: this.config.type,
                    container: _super.prototype.getModel.call(this, app, componentsAndContainer.leftover),
                    components: (componentsAndContainer.target || []).map(function (component) {
                        return _super.prototype._patchConfig.call(_this, component, app);
                    })
                };
                return {
                    model: model,
                    bindingString: model.container.bindingString
                };
            };
            return ContainerMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.ContainerMarkupRender = ContainerMarkupRender;
        var PassboxMarkupRender = (function (_super) {
            __extends(PassboxMarkupRender, _super);
            function PassboxMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            PassboxMarkupRender.prototype._getModelObject = function (modelConfig, app) {
                modelConfig.mode = "password";
                return _super.prototype._getModelObject.call(this, modelConfig, app);
            };
            return PassboxMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.PassboxMarkupRender = PassboxMarkupRender;
        var DateboxMarkupRender = (function (_super) {
            __extends(DateboxMarkupRender, _super);
            function DateboxMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            DateboxMarkupRender.prototype._getModelObject = function (modelConfig, app) {
                modelConfig.pickerType = "rollers";
                return _super.prototype._getModelObject.call(this, modelConfig, app);
            };
            return DateboxMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.DateboxMarkupRender = DateboxMarkupRender;
        var CommandMarkupRender = (function (_super) {
            __extends(CommandMarkupRender, _super);
            function CommandMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            CommandMarkupRender.prototype._getModelObject = function (modelConfig, app) {
                var result = _super.prototype._getModelObject.call(this, modelConfig, app), device = AppPlayer.LayoutHelper.getDeviceType();
                ["showIcon", "showText"].forEach(function (name) {
                    if (result[name]) {
                        result[name] = result[name][device];
                    }
                });
                return result;
            };
            CommandMarkupRender.prototype._getBindnigStringObject = function (modelObject) {
                var result = _super.prototype._getBindnigStringObject.call(this, modelObject);
                result.type = modelObject.buttonType;
                return result;
            };
            return CommandMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.CommandMarkupRender = CommandMarkupRender;
        var RowMarkupRender = (function (_super) {
            __extends(RowMarkupRender, _super);
            function RowMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            RowMarkupRender.getBootstrapColStyle = function (column, wrap, totalSpanCount) {
                var bootstrapColStyle = "", devices = ["lg", "md", "tablet", "phone"], map = {
                    lg: "lg",
                    md: "md",
                    tablet: "sm",
                    phone: "xs"
                }, span = column.span;
                devices.forEach(function (device) {
                    if (wrap && wrap[device]) {
                        span = totalSpanCount / wrap[device];
                    }
                    bootstrapColStyle += "col-" + map[device] + "-" + span + " ";
                });
                return bootstrapColStyle;
            };
            RowMarkupRender.prototype.getModel = function (app) {
                var _this = this;
                var columnsAndRow = AppPlayer.extract(this.config, "columns");
                (columnsAndRow.target || []).forEach(function (value) {
                    value["style"] = value["style"] || {};
                    value.style.verticalAlign = (columnsAndRow.leftover["style"] && columnsAndRow.leftover["style"].verticalAlign) || "top";
                });
                var model = {
                    type: this.config.type,
                    row: _super.prototype.getModel.call(this, app, columnsAndRow.leftover),
                    columns: (this._patchConfig(columnsAndRow.target, app) || []).map(function (column) {
                        return $.extend(column, {
                            bootstrapColStyle: _this._patchField(RowMarkupRender.getBootstrapColStyle(column, _this.config.wrap, _this.config.totalSpanCount || 12)),
                            style: _super.prototype.getModel.call(_this, app, AppPlayer.remap(column.style, { horizontalAlign: "textAlign" }, true))
                        });
                    })
                };
                return {
                    model: model,
                    bindingString: model.row.bindingString
                };
            };
            return RowMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.RowMarkupRender = RowMarkupRender;
        var ListMarkupRender = (function (_super) {
            __extends(ListMarkupRender, _super);
            function ListMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            ListMarkupRender.prototype.getModel = function (app) {
                var itemAndGroupList = AppPlayer.extract(this.config, "itemComponents"), groupAndList = AppPlayer.extract(itemAndGroupList.leftover, "groupComponents");
                groupAndList.leftover["scrollingEnabled"] = !!this.config["scrollable"];
                var model = {
                    type: this.config.type,
                    list: _super.prototype.getModel.call(this, app, groupAndList.leftover),
                    item: this._patchConfig(itemAndGroupList.target, app),
                    group: this._patchConfig(groupAndList.target, app)
                };
                return {
                    model: model,
                    bindingString: model.list.bindingString
                };
            };
            return ListMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.ListMarkupRender = ListMarkupRender;
        var FieldsetMarkupRender = (function (_super) {
            __extends(FieldsetMarkupRender, _super);
            function FieldsetMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            FieldsetMarkupRender.prototype.getModel = function (app) {
                var _this = this;
                var fieldsAndFieldset = AppPlayer.extract(this.config, "fields"), model = {
                    type: this.config.type,
                    fieldset: _super.prototype.getModel.call(this, app, fieldsAndFieldset.leftover),
                    fields: (fieldsAndFieldset.target || []).map(function (field) {
                        field.visible = field.visible === undefined ? true : field.visible;
                        return $.extend(true, {
                            model: _this._patchConfig({
                                title: field.title,
                                visible: field.visible
                            }, app)
                        }, _this._patchConfig(field, app));
                    }),
                    //TODO Pletnev: Remove this along with its applayer/appdesigner templates when dxFieldSet supports this option out of the box
                    singleColumnLayout: AppPlayer.LayoutHelper.getDeviceType() === "phone"
                };
                return {
                    model: model,
                    bindingString: model.fieldset.bindingString
                };
            };
            return FieldsetMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.FieldsetMarkupRender = FieldsetMarkupRender;
        var TabsMarkupRender = (function (_super) {
            __extends(TabsMarkupRender, _super);
            function TabsMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            TabsMarkupRender.prototype.getModel = function (app) {
                var tabs = AppPlayer.extract(this.config, "tabs");
                delete tabs.leftover["type"];
                if (this.config.style && this.config.style.height) {
                    tabs.leftover["height"] = this.config.style.height;
                }
                var style = AppPlayer.extract(tabs.leftover, "style"), model = {
                    type: this.config.type,
                    tabpanel: _super.prototype.getModel.call(this, app, style.leftover),
                    control: _super.prototype.getModel.call(this, app, { tabpanel: style.leftover, style: style.target }),
                    tabs: this._patchConfig(tabs.target, app)
                };
                return {
                    model: model,
                    bindingString: model.tabpanel.bindingString
                };
            };
            return TabsMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.TabsMarkupRender = TabsMarkupRender;
        var AccordionMarkupRender = (function (_super) {
            __extends(AccordionMarkupRender, _super);
            function AccordionMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            AccordionMarkupRender.prototype.getModel = function (app) {
                var panels = AppPlayer.extract(this.config, "panels");
                delete panels.leftover["type"];
                var style = AppPlayer.extract(panels.leftover, "style"), model = {
                    type: this.config.type,
                    control: _super.prototype.getModel.call(this, app, { options: style.leftover, style: style.target }),
                    panels: this._patchConfig(panels.target, app)
                };
                return {
                    model: model,
                    bindingString: ""
                };
            };
            return AccordionMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.AccordionMarkupRender = AccordionMarkupRender;
        var ScrollViewMarkupRender = (function (_super) {
            __extends(ScrollViewMarkupRender, _super);
            function ScrollViewMarkupRender(config, options) {
                if (options === void 0) { options = {}; }
                _super.call(this, config, options);
            }
            ScrollViewMarkupRender.prototype.getModel = function (app) {
                var contentAndView = AppPlayer.extract(this.config, "components");
                return {
                    model: {
                        type: this.config.type,
                        scrollview: _super.prototype.getModel.call(this, app, contentAndView.leftover),
                        components: this._patchConfig(contentAndView.target, app)
                    },
                    bindingString: ""
                };
            };
            return ScrollViewMarkupRender;
        })(ComponentMarkupRenderBase);
        Views.ScrollViewMarkupRender = ScrollViewMarkupRender;
        //TODO Pletnev Cache getComponentModel results by hash of (componentName + viewModel)
        //TODO Pletnev And extract model: any from arguments (getComponentModel should return a function that takes model: any)
        function getComponentModel(params) {
            var componentInfo = params.componentName ? AppPlayer.Views.componentInfos[params.componentName] : null, bindingProperties = [], componentViewModel = AppPlayer.propertyVisitor(params.viewModel, function (context) {
                var value = context.value, propName = context.name, isEvent = false, result = value, fn;
                if (componentInfo && componentInfo.events) {
                    isEvent = componentInfo.events.some(function (eventName) { return eventName === propName; });
                }
                if (isEvent) {
                    fn = params.functions[value];
                    var runContext = $.extend({}, params.runContext);
                    result = function (e) {
                        var event = e ? e.jQueryEvent : null;
                        if (event && event.stopPropagation && params.componentName !== "command") {
                            event.stopPropagation();
                        }
                        // TODO Pletnev Choose itemData or data depending on event and object
                        if (e && (e.itemData || e.data)) {
                            runContext.$data = e.itemData || e.data;
                        }
                        else {
                            runContext.$data = params.runContext.$data;
                        }
                        return fn(runContext);
                    };
                }
                else {
                    if (typeof value === "string") {
                        var val = value;
                        if (val.indexOf("'") === 0 && val.lastIndexOf("'") === val.length - 1) {
                            val = val.substr(1, val.length - 2);
                        }
                        result = AppPlayer.wrapModelReference(val, params.runContext, params.callerInfo);
                        if (result !== val) {
                            bindingProperties.push(context.path ? context.path + "." + propName : propName);
                        }
                    }
                }
                return result;
            });
            if (componentInfo && componentInfo.componentViewModel) {
                componentViewModel = componentInfo.componentViewModel(componentViewModel);
            }
            if (bindingProperties.length > 0) {
                componentViewModel["_bindingProperties"] = bindingProperties;
            }
            return componentViewModel;
        }
        Views.getComponentModel = getComponentModel;
        function isNestedTemplateModel(bindingContext) {
            while (bindingContext.$parent) {
                if (bindingContext["nestedTemplateModel"] !== undefined) {
                    return bindingContext["nestedTemplateModel"];
                }
                bindingContext = bindingContext.$parent;
            }
            return false;
        }
        ko.bindingHandlers["withModel"] = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                var value = valueAccessor(), nestedTemplateModel = isNestedTemplateModel(bindingContext), model = bindingContext.$root, data = bindingContext.$data, $templateElement;
                if (nestedTemplateModel) {
                    $templateElement = $(ko.virtualElements.firstChild(element)).parents("[data-options^='dxTemplate']");
                    if ($templateElement.length > 0) {
                        data = ko.dataFor($templateElement.get(0));
                    }
                }
                viewModel = getComponentModel({
                    componentName: value.component,
                    runContext: {
                        $data: data,
                        $model: model,
                        $global: model._global
                    },
                    callerInfo: {
                        callerType: "getComponentModel delegate",
                        callerId: value.component
                    },
                    viewModel: value.viewModel,
                    functions: model._functions
                });
                viewModel.nestedTemplateModel = nestedTemplateModel;
                // Make a modified binding context, with a extra properties, and apply it to descendant elements
                ko.applyBindingsToDescendants(bindingContext.createChildContext(viewModel, "component", // Optionally, pass a string here as an alias for the data item in descendant contexts
                function (context) {
                    ko.utils.extend(context, valueAccessor());
                }), element);
                // Also tell KO *not* to bind the descendants itself, otherwise they will be bound twice
                return { controlsDescendantBindings: true };
            }
        };
        ko.virtualElements.allowedBindings["withModel"] = true;
    })(Views = AppPlayer.Views || (AppPlayer.Views = {}));
})(AppPlayer || (AppPlayer = {}));
/// <reference path="views/viewmarkuprenderer.ts" />
var AppPlayer;
(function (AppPlayer) {
    var Views;
    (function (Views) {
        "use strict";
        var View = (function () {
            function View(viewConfig, application, rootElement) {
                if (AppPlayer.findInArray(viewConfig.params, function (p) { return !!p.shared; })) {
                    viewConfig.disableCache = true;
                }
                var viewMarkup = (new Views.ViewMarkupRenderer(viewConfig, application)).render();
                $(rootElement || document.body).append(viewMarkup);
                this.viewModel = function (params) {
                    var vm = new Views.ViewModel(viewConfig, application, params);
                    return vm.model;
                };
            }
            return View;
        })();
        Views.View = View;
    })(Views = AppPlayer.Views || (AppPlayer.Views = {}));
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    var Layout;
    (function (Layout) {
        "use strict";
        var Component = (function () {
            function Component() {
                this.attachedProperties = [];
            }
            return Component;
        })();
        Layout.Component = Component;
        var Container = (function (_super) {
            __extends(Container, _super);
            function Container() {
                _super.apply(this, arguments);
                this.components = [];
            }
            Container.prototype.layoutChildren = function () { };
            return Container;
        })(Component);
        Layout.Container = Container;
        var Row = (function (_super) {
            __extends(Row, _super);
            function Row() {
                _super.apply(this, arguments);
            }
            Row.prototype.layoutChildren = function () { };
            return Row;
        })(Container);
        Layout.Row = Row;
    })(Layout = AppPlayer.Layout || (AppPlayer.Layout = {}));
})(AppPlayer || (AppPlayer = {}));
/// <reference path="viewmarkuprenderer.ts" />
var AppPlayer;
(function (AppPlayer) {
    var Views;
    (function (Views) {
        "use strict";
        Views.defaultStyles = ["boxShadow", "boxSizing", "clear", "clip", "content", "cursor", "direction", "display", "float", "letterSpacing", "opacity", "textDecorationColor", "textDecorationLine", "textDecorationStyle", "textIndent", "textShadow", "visibility"];
        Views.componentInfos = {
            "view": {
                rendererType: Views.ComponentMarkupRenderBase,
                events: ["onLoad", "onShow", "onHide", "onDispose"]
            },
            "link": {
                rendererType: Views.ComponentMarkupRenderBase,
                defaults: { text: "", link: "", visible: true }
            },
            "label": {
                rendererType: Views.ComponentMarkupRenderBase,
                defaults: { text: "", visible: true }
            },
            "button": {
                rendererType: Views.ComponentMarkupRenderBase,
                events: ["onClick"],
                mapping: {
                    customControl: {
                        kind: "type"
                    }
                },
                componentViewModel: function (viewModel) {
                    return AppPlayer.remap(viewModel, Views.componentInfos["button"].mapping.customControl, true);
                }
            },
            "input": {
                rendererType: Views.ComponentMarkupRenderBase,
                events: ["onChange"]
            },
            "image": {
                rendererType: Views.ComponentMarkupRenderBase,
                defaults: { width: "auto", height: "auto", visible: true }
            },
            "fileimage": {
                rendererType: Views.ComponentMarkupRenderBase,
                defaults: {
                    emptyLabel: "Click or tap to select image",
                    changeImageText: "Take photo or select from gallery",
                    clearText: "Clear",
                    openGalleryText: "Select from gallery",
                    takePhotoText: "Take photo",
                    style: {
                        fontSize: "12px",
                        overflow: "hidden",
                        textOverflow: "ellipsis",
                        whiteSpace: "normal"
                    }
                },
                componentViewModel: function (viewModel) {
                    return new Views.FileImageEditorViewModel(viewModel);
                }
            },
            "textarea": {
                rendererType: Views.ComponentMarkupRenderBase,
                events: ["onChange"]
            },
            "passbox": {
                rendererType: Views.PassboxMarkupRender,
                events: ["onChange"]
            },
            "numberbox": {
                rendererType: Views.ComponentMarkupRenderBase,
                defaults: { showSpinButtons: true, value: null },
                events: ["onValueChanged"]
            },
            "radio": {
                rendererType: Views.ComponentMarkupRenderBase,
                mapping: {
                    customControl: {
                        stringItems: "items",
                        stringValue: "value"
                    }
                },
                componentViewModel: function (viewModel) {
                    viewModel = AppPlayer.remap(viewModel, Views.componentInfos["radio"].mapping.customControl, true);
                    return viewModel;
                }
            },
            "actionsheet": {
                rendererType: Views.ComponentMarkupRenderBase,
                events: ["onItemClick"]
            },
            "switch": {
                rendererType: Views.ComponentMarkupRenderBase
            },
            "loadpanel": {
                rendererType: Views.ComponentMarkupRenderBase
            },
            "datebox": {
                rendererType: Views.DateboxMarkupRender,
                events: ["onChange"]
            },
            "box": {
                rendererType: Views.BoxMarkupRender,
                defaults: { visible: true }
            },
            "container": {
                rendererType: Views.ContainerMarkupRender,
                defaults: {
                    visible: true,
                    style: {
                        verticalAlign: "top"
                    }
                },
                mapping: {
                    style: "container.model.container.containerStyle",
                    customControl: {
                        visible: "container.model.visible"
                    },
                    customStyle: {
                        verticalAlign: "container.model.container.contentStyle.verticalAlign",
                        maxWidth: "container.model.container.contentStyle.maxWidth",
                        horizontalAlign: "container.model.container.containerStyle.textAlign"
                    }
                }
            },
            "list": {
                rendererType: Views.ListMarkupRender,
                defaults: {
                    scrollable: true
                },
                events: ["onItemClick", "onItemHold"],
                mapping: {
                    style: "list.model.style"
                },
                componentViewModel: function (viewModel) {
                    $.extend(viewModel, viewModel.editConfig);
                    delete (viewModel.editConfig);
                    return viewModel;
                }
            },
            "lookup": {
                rendererType: Views.ComponentMarkupRenderBase,
                mapping: {
                    customControl: {
                        valueExpression: "valueExpr",
                        displayExpression: "displayExpr"
                    }
                },
                componentViewModel: function (viewModel) {
                    var value = viewModel.value ? ko.unwrap(viewModel.value) : undefined, valueString = JSON.stringify(value), valueGetter = viewModel.valueExpression ?
                        DevExpress.data.utils.compileGetter(ko.unwrap(viewModel.valueExpression)) :
                        function (value) { return value; };
                    viewModel = AppPlayer.remap(viewModel, Views.componentInfos["lookup"].mapping.customControl, true);
                    if (viewModel && ko.unwrap(viewModel.items)) {
                        if ($.isArray(ko.unwrap(viewModel.items))) {
                            ko.unwrap(viewModel.items).forEach(function (item) {
                                if (JSON.stringify(value) === JSON.stringify(valueGetter(item))) {
                                    viewModel.value(valueGetter(item));
                                }
                            });
                        }
                    }
                    return viewModel;
                }
            },
            "tabpanel": {
                rendererType: Views.TabsMarkupRender,
                mapping: {
                    control: "control.model.tabpanel",
                    style: "control.model.style",
                    customStyle: {
                        height: "control.model.tabpanel.height"
                    }
                },
                defaults: {
                    style: {}
                }
            },
            "accordion": {
                rendererType: Views.AccordionMarkupRender,
                mapping: {
                    control: "control.model.options",
                    style: "control.model.style"
                }
            },
            "datagrid": {
                rendererType: Views.ComponentMarkupRenderBase,
                events: ["onRowClick"],
                componentViewModel: function (viewModel) {
                    var dataSource = ko.unwrap(viewModel.dataSource);
                    if (dataSource && dataSource["_calculatedFields"]) {
                        var calculatedFields = dataSource["_calculatedFields"];
                        viewModel.onRowUpdating = function (rowInfo) {
                            var newData = rowInfo.newData;
                            $.each(newData, function (name, value) {
                                if (AppPlayer.findInArray(calculatedFields, function (m) { return m.name === name; })) {
                                    delete newData[name];
                                }
                            });
                        };
                    }
                    return viewModel;
                }
            },
            "row": {
                rendererType: Views.RowMarkupRender,
                defaults: { visible: true },
                mapping: {
                    style: "row.model.style"
                }
            },
            "column": {
                rendererType: Views.ComponentMarkupRenderBase
            },
            "fieldset": {
                rendererType: Views.FieldsetMarkupRender,
                mapping: {
                    style: "fieldset.model.style"
                }
            },
            "command": {
                rendererType: Views.CommandMarkupRender,
                defaults: { visible: true, disabled: false, buttonType: "normal" },
                events: ["onExecute"]
            },
            "scrollview": {
                rendererType: Views.ScrollViewMarkupRender,
                mapping: {
                    style: "scrollview.model.style"
                }
            }
        };
    })(Views = AppPlayer.Views || (AppPlayer.Views = {}));
})(AppPlayer || (AppPlayer = {}));
/// <reference path="views/componentsinfo.ts" />
var AppPlayer;
(function (AppPlayer) {
    var Views;
    (function (Views) {
        "use strict";
        var dxdata = DevExpress.data;
        var ViewModel = (function () {
            function ViewModel(viewConfig, application, originalParams) {
                var _this = this;
                this.events = {};
                this.alreadyShown = false;
                this.currentParams = originalParams;
                this.model = AppPlayer.Model.createModel(viewConfig, application);
                this.viewConfig = viewConfig;
                this.patchEvents(application);
                this.model["_functions"] = application.functions;
                this.model["_global"] = application.model;
                this.model["_scrollViewResetter"] = { reset: function () { } };
                if ((viewConfig.model || []).filter(function (item) { return item.name === "title"; }).length === 0) {
                    this.model["title"] = ko.pureComputed(function () {
                        return AppPlayer.getModelValue(viewConfig.title || "", { $global: application.model, $model: _this.model }, { callerId: "title", callerType: "View model" });
                    });
                }
                var _parametersAreReady = ko.observable(false);
                this.model.isReady = ko.observable(false);
                this.model["viewShowing"] = function (config) {
                    if (!_this.alreadyShown || viewConfig.refreshWhenShown) {
                        _this.currentParams = config.params || {};
                        _this.setModelValueFromParameter(application, _parametersAreReady);
                    }
                    var popup = ((config.viewInfo || {}).layoutController || {})._popup;
                    if (popup) {
                        ["height", "width"].forEach(function (property) {
                            if (viewConfig[property]) {
                                popup.option(property, viewConfig[property]);
                                if (popup.option("fullScreen")) {
                                    popup.option("fullScreen", false);
                                }
                            }
                        });
                    }
                };
                this.model["viewShown"] = function () {
                    if (!_this.alreadyShown) {
                        ko.computed(function () {
                            _this.model.isReady(ko.unwrap(_parametersAreReady));
                        });
                        AppPlayer.Model.initializeDataSources(_this.model, { $model: _this.model, $global: application.model }, application, application.stores, false, viewConfig.dataSources);
                        _this.alreadyShown = true;
                    }
                    else if (viewConfig.refreshWhenShown) {
                        AppPlayer.Model.initializeDataSources(_this.model, { $model: _this.model, $global: application.model }, application, application.stores, true, viewConfig.dataSources);
                        _this.model["_scrollViewResetter"].reset();
                    }
                    if (!_this.refreshStrategies) {
                        _this.refreshStrategies = _this.createRefreshStrategies(application, _this.currentParams);
                    }
                    else {
                        _this.refreshStrategies.forEach(function (strategy) {
                            strategy.enabled = true;
                            strategy.refresh();
                        });
                    }
                    _this.onEvent("onShow", _this.currentParams && _this.currentParams.parameters);
                };
                this.model["viewHidden"] = function () {
                    if (viewConfig.refreshWhenShown) {
                        _parametersAreReady(false);
                        _this.clearModel(application);
                    }
                    _this.refreshStrategies.forEach(function (strategy) {
                        strategy.hidden();
                    });
                    _this.onEvent("onHide", _this.currentParams && _this.currentParams.parameters);
                };
                this.model["viewDisposing"] = function () {
                    _this.refreshStrategies.forEach(function (strategy) {
                        strategy.dispose();
                    });
                    _this.refreshStrategies.splice(0, _this.refreshStrategies.length);
                    _this.onEvent("onDispose", _this.currentParams && _this.currentParams.parameters);
                };
                this.onEvent("onLoad", this.currentParams && this.currentParams.parameters);
            }
            ViewModel.optional = function (param) {
                return param.defaultValue !== void 0;
            };
            ViewModel.prototype.clearModel = function (application) {
                var _this = this;
                var emptyModel = AppPlayer.Model.createModel(this.viewConfig, application);
                this.viewConfig.model
                    .filter(function (propertyConfig) { return propertyConfig.getter == null; })
                    .forEach(function (propertyConfig) {
                    var propertyName = propertyConfig.name;
                    _this.model[propertyName] = emptyModel[propertyName];
                });
            };
            ViewModel.prototype.patchEvents = function (application) {
                var _this = this;
                var componentInfo = Views.componentInfos["view"];
                componentInfo.events.forEach(function (eventName) {
                    var event = _this.viewConfig[eventName], functionCompiler;
                    if (!event || !application.createFunctionCompiler) {
                        return;
                    }
                    functionCompiler = application.createFunctionCompiler(event);
                    _this.events[eventName] = function (e) {
                        return functionCompiler.run({
                            $global: application.model,
                            $model: _this.model,
                            $data: e
                        }, {
                            callerType: "view event",
                            callerId: eventName
                        });
                    };
                });
            };
            ViewModel.prototype.onEvent = function (eventName, params) {
                var handler = this.events[eventName];
                if (handler) {
                    handler(params);
                }
            };
            ViewModel.prototype.createRefreshStrategies = function (application, viewParameters) {
                var _this = this;
                var refreshStrategies = [];
                $.each(this.model, function (index, value) {
                    if (!(value instanceof dxdata.DataSource)) {
                        return;
                    }
                    var ds = value, refreshStrategy = SourceRefreshStrategy.create(ds);
                    if (refreshStrategy) {
                        refreshStrategies.push(refreshStrategy);
                    }
                    if (ds["_monitor"] && ds["_monitor"].stores && ds["_monitor"].stores.length > 0) {
                        refreshStrategies.push(new MonitorRefreshStrategy(ds, application, ds["_monitor"].stores));
                    }
                });
                if (this.viewConfig.params) {
                    this.viewConfig.params.forEach(function (parameter) {
                        var typeInfo = application.typeInfoRepository.get(parameter.type);
                        if (typeInfo && typeInfo.kind === AppPlayer.TYPES.STORE_TYPE) {
                            var refreshStrategy = ParameterRefreshStrategy.create(parameter, _this.model, application, viewParameters);
                            if (refreshStrategy) {
                                refreshStrategies.push(refreshStrategy);
                            }
                        }
                    });
                }
                return refreshStrategies;
            };
            ViewModel.prototype.setModelValueFromParameter = function (application, isReady) {
                var _this = this;
                var parametersLoadingCount = 0;
                if (this.viewConfig.params) {
                    this.viewConfig.params.forEach(function (parameter) {
                        var typeInfo = application.typeInfoRepository.get(parameter.type), objectKey;
                        if (parameter.shared) {
                            if (typeof application.sharedObjects[parameter.name] === "undefined") {
                                console.error("Shared parameter '" + parameter.name + "' is missing from the sharedObjects collection.");
                            }
                            _this.model[parameter.name] = application.sharedObjects[parameter.name];
                            delete application.sharedObjects[parameter.name];
                        }
                        else if (typeInfo && typeInfo.kind === AppPlayer.TYPES.STORE_TYPE) {
                            objectKey = _this.currentParams.parameters ? _this.currentParams.parameters[parameter.name] : undefined;
                            if (objectKey) {
                                var store = application.stores[parameter.type];
                                parametersLoadingCount++;
                                store.byKey(objectKey, { expand: parameter.expand })
                                    .then(function (data) { _this.model[parameter.name] = data; }, function () { application.processParameterLoadingError(parameter.name, objectKey); })
                                    .always(function () {
                                    parametersLoadingCount--;
                                    isReady(!parametersLoadingCount);
                                });
                            }
                            else {
                                _this.model[parameter.name] = parameter.defaultValue;
                            }
                        }
                        else {
                            _this.model[parameter.name] = (_this.currentParams.parameters && _this.currentParams.parameters[parameter.name]) || parameter.defaultValue;
                        }
                    });
                }
                isReady(parametersLoadingCount === 0);
            };
            return ViewModel;
        })();
        Views.ViewModel = ViewModel;
        var SourceRefreshStrategy = (function () {
            function SourceRefreshStrategy(ds) {
                this.ds = ds;
                this.enabled = true;
            }
            SourceRefreshStrategy.create = function (ds) {
                switch (ds["_refreshOnViewShown"]) {
                    case "never":
                        return null;
                    case "always":
                        return new SourceRefreshStrategy(ds);
                    case "whenChanges":
                    default:
                        return new WhenChangesSourceRefreshStrategy(ds);
                }
            };
            SourceRefreshStrategy.prototype.refresh = function () {
                this.ds.load();
            };
            SourceRefreshStrategy.prototype.dispose = function () { };
            SourceRefreshStrategy.prototype.hidden = function () {
                this.enabled = false;
            };
            return SourceRefreshStrategy;
        })();
        var WhenChangesSourceRefreshStrategy = (function (_super) {
            __extends(WhenChangesSourceRefreshStrategy, _super);
            function WhenChangesSourceRefreshStrategy(ds) {
                var _this = this;
                _super.call(this, ds);
                this.ds = ds;
                this.callback = function () {
                    _this.modified = true;
                    if (_this.enabled) {
                        _this.refresh();
                    }
                };
                this.ds.store().on("modified", this.callback);
            }
            WhenChangesSourceRefreshStrategy.prototype.refresh = function () {
                if (this.modified) {
                    this.modified = false;
                    _super.prototype.refresh.call(this);
                }
            };
            WhenChangesSourceRefreshStrategy.prototype.dispose = function () {
                this.ds.store().off("modified", this.callback);
            };
            return WhenChangesSourceRefreshStrategy;
        })(SourceRefreshStrategy);
        var ParameterRefreshStrategy = (function () {
            function ParameterRefreshStrategy(param, model, application, viewParameters) {
                this.enabled = true;
                this.param = param;
                this.model = model;
                this.application = application;
                this.store = application.stores[param.type];
            }
            ParameterRefreshStrategy.create = function (param, model, application, viewParameters) {
                switch (param.refreshOnViewShown) {
                    case "never":
                        return null;
                    case "always":
                        return new ParameterRefreshStrategy(param, model, application, viewParameters);
                    case "whenChanges":
                    default:
                        return new WhenChangesParameterRefreshStrategy(param, model, application, viewParameters);
                }
            };
            ParameterRefreshStrategy.prototype.refresh = function () {
                var _this = this;
                var key = this.store.keyOf(this.model[this.param.name]);
                if (key) {
                    this.store.byKey(key, { expand: this.param.expand }).done(function (data) {
                        _this.model[_this.param.name] = data;
                    });
                }
            };
            ParameterRefreshStrategy.prototype.dispose = function () { };
            ParameterRefreshStrategy.prototype.hidden = function () {
                this.enabled = false;
            };
            return ParameterRefreshStrategy;
        })();
        var WhenChangesParameterRefreshStrategy = (function (_super) {
            __extends(WhenChangesParameterRefreshStrategy, _super);
            function WhenChangesParameterRefreshStrategy(param, model, application, viewParameters) {
                var _this = this;
                _super.call(this, param, model, application, viewParameters);
                this.modified = false;
                this.removed = false;
                this.viewCacheKey = application.viewCacheKey && application.viewCacheKey();
                var objectKey = viewParameters.parameters ? viewParameters.parameters[param.name] : undefined;
                this.insertedCallback = function (values, key) {
                    if (key === objectKey) {
                        _this.modified = true;
                        if (_this.enabled) {
                            _this.refresh();
                        }
                    }
                };
                this.store.on("inserted", this.insertedCallback);
                this.updatedCallback = function (key, values) {
                    if (!_this.enabled && (objectKey === undefined || key === objectKey)) {
                        _this.modified = true;
                        if (_this.enabled) {
                            _this.refresh();
                        }
                    }
                };
                this.store.on("updated", this.updatedCallback);
                this.removedCallback = function (key) {
                    if (objectKey === undefined || key === objectKey) {
                        _this.removed = true;
                        if (!_this.enabled) {
                            _this.removeViewCache();
                        }
                    }
                };
                this.store.on("removed", this.removedCallback);
            }
            WhenChangesParameterRefreshStrategy.prototype.refresh = function () {
                if (this.modified) {
                    this.modified = false;
                    _super.prototype.refresh.call(this);
                }
            };
            WhenChangesParameterRefreshStrategy.prototype.dispose = function () {
                this.store.off("inserted", this.insertedCallback);
                this.store.off("updated", this.updatedCallback);
                this.store.off("removed", this.removedCallback);
            };
            WhenChangesParameterRefreshStrategy.prototype.hidden = function () {
                _super.prototype.hidden.call(this);
                if (this.removed) {
                    this.removeViewCache();
                }
            };
            WhenChangesParameterRefreshStrategy.prototype.removeViewCache = function () {
                if (this.application.removeViewCache && this.viewCacheKey !== void 0) {
                    this.application.removeViewCache(this.viewCacheKey);
                }
            };
            return WhenChangesParameterRefreshStrategy;
        })(ParameterRefreshStrategy);
        var MonitorRefreshStrategy = (function () {
            function MonitorRefreshStrategy(ds, application, storeIds) {
                var _this = this;
                this.ds = ds;
                this.application = application;
                this.storeIds = storeIds;
                this.enabled = true;
                this.modified = false;
                this.refreshFunc = function () {
                    _this.modified = true;
                    _this.refresh();
                };
                this.storeIds.forEach(function (storeId) {
                    var store = _this.application.stores[storeId];
                    store.on("modified", _this.refreshFunc);
                });
            }
            MonitorRefreshStrategy.prototype.refresh = function () {
                if (this.enabled) {
                    this.ds.load();
                    this.modified = false;
                }
            };
            MonitorRefreshStrategy.prototype.dispose = function () {
                var _this = this;
                this.storeIds.forEach(function (storeId) {
                    var store = _this.application.stores[storeId];
                    store.off("modified", _this.refreshFunc);
                });
            };
            MonitorRefreshStrategy.prototype.hidden = function () {
                this.enabled = false;
            };
            return MonitorRefreshStrategy;
        })();
    })(Views = AppPlayer.Views || (AppPlayer.Views = {}));
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    var Logic;
    (function (Logic) {
        "use strict";
        var dxdialog = DevExpress.ui.dialog;
        (function (Flow) {
            Flow[Flow["Return"] = 0] = "Return";
            Flow[Flow["Break"] = 1] = "Break";
            Flow[Flow["Continue"] = 2] = "Continue";
        })(Logic.Flow || (Logic.Flow = {}));
        var Flow = Logic.Flow;
        var Result = (function () {
            function Result() {
            }
            return Result;
        })();
        Logic.Result = Result;
        var Operation = (function () {
            function Operation() {
            }
            Operation.eval = function (expr, context) {
                var varNames = [], varValues = [];
                $.each(context, function (name, value) {
                    varNames.push(name);
                    varValues.push(value);
                });
                varNames.push("return (" + expr + ")");
                var fn = Function.apply(null, varNames);
                return fn.apply(null, varValues);
            };
            Operation.run = function (calls, variables, functions) {
                if (!calls || calls.length === 0) {
                    return Logic.trivialPromise();
                }
                var callIndex = 0, thenHandler = function (result) {
                    if ((callIndex === calls.length - 1) || (result && result.flow in Flow)) {
                        return Logic.trivialPromise(result);
                    }
                    callIndex++;
                    return calls[callIndex].run(variables, functions)
                        .then(thenHandler);
                };
                return calls[callIndex]
                    .run(variables, functions)
                    .then(thenHandler);
            };
            //caption: string;  // TODO: Ivan
            //autoGenerateCaption: boolean; // TODO: Ivan
            Operation.prototype.run = function (variables, functions) {
                throw Error("Not implemented");
            };
            Operation.prototype.eval = function (expr, variables, functions) {
                var varNames = [], varValues = [];
                $.each(variables, function (name, variable) {
                    varNames.push(variable.name);
                    varValues.push(variable.value);
                });
                if (!functions) {
                    varNames.push("return (" + expr + ")");
                }
                else {
                    varNames.push("$functions");
                    varValues.push(functions);
                    varNames.push("with($functions) { return (" + expr + "); }");
                }
                var fn = Function.apply(null, varNames);
                return fn.apply(null, varValues);
            };
            Operation.fromJson = function (json) {
                if (json instanceof Operation) {
                    return json;
                }
                else {
                    var result = Operation.create(json._type);
                    Operation.restoreProperties(json, result);
                    return result;
                }
            };
            Operation.create = function (type) {
                return new AppPlayer.Logic[type]();
            };
            Operation.restoreProperties = function (json, result) {
                $.each(json, function (name, value) {
                    if (name === "_type") {
                        return;
                    }
                    if (Array.isArray(value)) {
                        result[name] = value.map(function (element) {
                            if (typeof element === "object" && element && element._type) {
                                return Operation.fromJson(element);
                            }
                            else {
                                return Operation.restoreProperties(element, Array.isArray(element) ? [] : {});
                            }
                        });
                    }
                    else if (value && typeof value === "object") {
                        if (value && value._type) {
                            result[name] = Operation.fromJson(value);
                        }
                        else {
                            result[name] = Operation.restoreProperties(value, {});
                        }
                    }
                    else {
                        result[name] = value;
                    }
                });
                return result;
            };
            return Operation;
        })();
        Logic.Operation = Operation;
        var Event = (function (_super) {
            __extends(Event, _super);
            function Event(flow, returnValue) {
                _super.call(this);
                this.returnValue = null;
                this.returnExpr = "";
                if (flow in Flow) {
                    this.flow = flow;
                    this.returnValue = returnValue;
                }
                else if (flow) {
                    var param = flow;
                    if (typeof param.flow !== "undefined") {
                        this.flow = param.flow;
                    }
                    if (typeof param.returnValue !== "undefined") {
                        this.returnValue = param.returnValue;
                    }
                    if (typeof param.returnExpr !== "undefined") {
                        this.returnExpr = param.returnExpr;
                    }
                }
            }
            Event.prototype.run = function (variables, functions) {
                var result = {
                    flow: this.flow,
                    value: undefined
                };
                if (this.flow === Flow.Return) {
                    if (this.returnExpr) {
                        result.value = this.eval(this.returnExpr, variables, functions);
                    }
                    else {
                        result.value = this.returnValue;
                    }
                }
                return Logic.trivialPromise(result);
            };
            return Event;
        })(Operation);
        Logic.Event = Event;
        var SetValue = (function (_super) {
            __extends(SetValue, _super);
            function SetValue(params) {
                var _this = this;
                _super.call(this);
                this.valueExpr = "";
                this.leftExpr = "";
                if (params) {
                    $.each(params, function (name, value) {
                        _this[name] = value || _this[name];
                    });
                }
            }
            SetValue.prototype.run = function (variables, functions) {
                var pathExpr;
                if (this.leftExpr) {
                    pathExpr = this.leftExpr;
                }
                else {
                    if (this.variableName) {
                        console.warn("SetValue: variableName and pathExpr are obsolete. Use leftExpr instead");
                        pathExpr = this.pathExpr ? this.variableName + "." + this.eval(this.pathExpr, variables, functions) : this.variableName;
                    }
                    else {
                        return Logic.rejectPromise("SetValue: leftExpr must be defined");
                    }
                }
                if (this.valueExpr === "") {
                    return Logic.rejectPromise("SetValue: valueExpr must be defined");
                }
                var value = this.eval(this.valueExpr, variables, functions), path = this.prepareExpr(pathExpr, variables, functions);
                this.assignValue(path, variables, value);
                return Logic.trivialPromise();
            };
            SetValue.prototype.prepareExpr = function (expr, variables, functions) {
                var bracketIndex = expr.indexOf("["), closeBracketIndex, result = bracketIndex > 0 ? expr.substr(0, bracketIndex) : expr, bracketContents;
                while (bracketIndex > 0) {
                    closeBracketIndex = expr.indexOf("]", bracketIndex);
                    bracketContents = expr.substring(bracketIndex + 1, closeBracketIndex).trim();
                    result += "." + this.eval(bracketContents, variables, functions);
                    bracketIndex = expr.indexOf("[", closeBracketIndex);
                    result += expr.substring(closeBracketIndex + 1, bracketIndex > 0 ? bracketIndex : undefined);
                }
                return result;
            };
            SetValue.prototype.assignValue = function (path, variables, value) {
                if (variables[path]) {
                    variables[path].value = value;
                }
                else {
                    var dotIndex = path.indexOf(".");
                    var variableName = path.substring(0, dotIndex);
                    path = path.substr(dotIndex + 1);
                    if (path !== this.path) {
                        this.setter = AppPlayer.compileSetter(path);
                        this.path = path;
                    }
                    this.setter(variables[variableName].value, value);
                }
            };
            return SetValue;
        })(Operation);
        Logic.SetValue = SetValue;
        var Create = (function (_super) {
            __extends(Create, _super);
            function Create(params) {
                _super.call(this);
                this.variableName = "";
                this.storeExpr = "";
                this.storeId = "";
                if (params) {
                    this.variableName = params.variableName;
                    this.storeId = params.storeId;
                }
            }
            Create.prototype.run = function (variables, functions) {
                var storeId = !!this.storeExpr ? this.eval(this.storeExpr, variables, functions) : this.storeId, dataStoreConfig = functions.getDataStoreConfig(storeId), result = {};
                if (dataStoreConfig.fields) {
                    dataStoreConfig.fields.forEach(function (field) {
                        result[field.name] = undefined;
                    });
                }
                variables[this.variableName] = new Logic.Variable({ name: this.variableName, value: result });
                return Logic.trivialPromise();
            };
            return Create;
        })(Operation);
        Logic.Create = Create;
        var AddToList = (function (_super) {
            __extends(AddToList, _super);
            function AddToList(params) {
                _super.call(this);
                this.variableName = "";
                this.value = null;
                this.expression = "";
                if (params) {
                    this.variableName = params.variableName;
                    if (params.expr) {
                        this.expression = params.expr;
                    }
                    else {
                        this.value = params.value;
                    }
                }
            }
            AddToList.prototype.run = function (variables, functions) {
                var list = variables[this.variableName].value, value = this.expression ? this.eval(this.expression, variables, functions) : this.value;
                list.push(value);
                return Logic.trivialPromise();
            };
            return AddToList;
        })(Operation);
        Logic.AddToList = AddToList;
        var InsertToList = (function (_super) {
            __extends(InsertToList, _super);
            function InsertToList(params) {
                _super.call(this);
                this.variableName = "";
                this.valueExpr = "";
                this.indexExpr = "";
                $.extend(this, params);
            }
            InsertToList.prototype.run = function (variables, functions) {
                if (!this.variableName) {
                    return Logic.rejectPromise("InsertToList: invalid variable name");
                }
                if (!this.valueExpr) {
                    return Logic.rejectPromise("InsertToList: invalid value expression");
                }
                var list = variables[this.variableName].value;
                if (!$.isArray(list)) {
                    return Logic.rejectPromise("InsertToList: variable should be array");
                }
                var value = this.eval(this.valueExpr, variables, functions), index = this.indexExpr ? this.eval(this.indexExpr, variables, functions) : undefined;
                if (index >= 0) {
                    list.splice(index, 0, value);
                    return Logic.trivialPromise();
                }
                else if (index === undefined) {
                    list.push(value);
                    return Logic.trivialPromise();
                }
                else {
                    return Logic.rejectPromise("InsertToList: index should be 0 or greater than 0");
                }
            };
            return InsertToList;
        })(Operation);
        Logic.InsertToList = InsertToList;
        var RemoveFromListByValue = (function (_super) {
            __extends(RemoveFromListByValue, _super);
            function RemoveFromListByValue(params) {
                var _this = this;
                _super.call(this);
                this.variableName = "";
                this.valueExpr = "";
                if (params) {
                    $.each(params, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            RemoveFromListByValue.prototype.run = function (variables, functions) {
                var variable = variables[this.variableName], list = variable.value, value, index;
                if (this.valueExpr) {
                    value = this.eval(this.valueExpr, variables, functions);
                }
                index = list.indexOf(value);
                if (index >= 0) {
                    list.splice(index, 1);
                }
                return Logic.trivialPromise();
            };
            return RemoveFromListByValue;
        })(Operation);
        Logic.RemoveFromListByValue = RemoveFromListByValue;
        var RemoveFromListByIndex = (function (_super) {
            __extends(RemoveFromListByIndex, _super);
            function RemoveFromListByIndex(params) {
                var _this = this;
                _super.call(this);
                this.variableName = "";
                this.index = -1;
                if (params) {
                    $.each(params, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            RemoveFromListByIndex.prototype.run = function (variables, functions) {
                var variable = variables[this.variableName], list = variable.value, index = this.index;
                if (index >= 0) {
                    list.splice(this.index, 1);
                    return Logic.trivialPromise();
                }
                else {
                    return Logic.rejectPromise("RemoveFromListByIndex: index should be 0 or greater than 0");
                }
            };
            return RemoveFromListByIndex;
        })(Operation);
        Logic.RemoveFromListByIndex = RemoveFromListByIndex;
        var CountList = (function (_super) {
            __extends(CountList, _super);
            function CountList(params) {
                _super.call(this);
                this.expr = "";
                this.resultVariableName = "";
                if (params) {
                    this.expr = params.expr;
                    this.resultVariableName = params.resultVariableName;
                }
            }
            CountList.prototype.run = function (variables, functions) {
                var list = this.eval(this.expr, variables, functions), len = Array.isArray(list) ? list.length : Object.keys(list).length;
                variables[this.resultVariableName].value = len;
                return Logic.trivialPromise();
            };
            return CountList;
        })(Operation);
        Logic.CountList = CountList;
        (function (AggregateType) {
            AggregateType[AggregateType["Min"] = 0] = "Min";
            AggregateType[AggregateType["Max"] = 1] = "Max";
            AggregateType[AggregateType["Sum"] = 2] = "Sum";
            AggregateType[AggregateType["Average"] = 3] = "Average";
        })(Logic.AggregateType || (Logic.AggregateType = {}));
        var AggregateType = Logic.AggregateType;
        var AggregateList = (function (_super) {
            __extends(AggregateList, _super);
            function AggregateList(params) {
                var _this = this;
                _super.call(this);
                this.type = AggregateType.Sum;
                this.variableName = "";
                this.resultVariableName = "";
                this.propertyName = "";
                this.seed = 0;
                if (params) {
                    $.each(params, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            AggregateList.prototype.run = function (variables, functions) {
                var _this = this;
                var aggregator, resultSelector, valueSelector = function (item) { return _this.propertyName ? item[_this.propertyName] : item; }, accumulator, list = variables[this.variableName].value;
                if (typeof variables[this.resultVariableName] === "undefined") {
                    return Logic.rejectPromise("AggregateList: invalid resultVariableName");
                }
                if (list.length === 0) {
                    variables[this.resultVariableName].value = null;
                    return Logic.trivialPromise();
                }
                switch (this.type) {
                    case AggregateType.Min:
                        aggregator = function (accumulator, value) { return value < accumulator ? value : accumulator; };
                        resultSelector = function (accumulator, list) { return accumulator; };
                        break;
                    case AggregateType.Max:
                        aggregator = function (accumulator, value) { return value > accumulator ? value : accumulator; };
                        resultSelector = function (accumulator, list) { return accumulator; };
                        break;
                    case AggregateType.Sum:
                        aggregator = function (accumulator, value) { return accumulator + value; };
                        resultSelector = function (accumulator, list) { return accumulator; };
                        break;
                    case AggregateType.Average:
                        aggregator = function (accumulator, value) { return accumulator + value; };
                        resultSelector = function (accumulator, list) { return accumulator / list.length; };
                        break;
                    default:
                        return Logic.rejectPromise("AggregateList: invalid aggregate function");
                }
                accumulator = this.seed;
                list.forEach(function (item) {
                    accumulator = aggregator(accumulator, valueSelector(item));
                });
                variables[this.resultVariableName].value = resultSelector(accumulator, list);
                return Logic.trivialPromise();
            };
            return AggregateList;
        })(Operation);
        Logic.AggregateList = AggregateList;
        var SortList = (function (_super) {
            __extends(SortList, _super);
            function SortList(params) {
                var _this = this;
                _super.call(this);
                this.variableName = "";
                this.desc = false;
                this.propertyName = "";
                if (params) {
                    $.each(params, function (name, val) { return _this[name] = val; });
                }
            }
            SortList.prototype.run = function (variables, functions) {
                var _this = this;
                var list = variables[this.variableName].value, compare;
                if (!this.propertyName) {
                    if (this.desc) {
                        compare = function (a, b) { return b - a; };
                    }
                }
                else {
                    if (this.desc) {
                        compare = function (a, b) { return b[_this.propertyName] - a[_this.propertyName]; };
                    }
                    else {
                        compare = function (a, b) { return a[_this.propertyName] - b[_this.propertyName]; };
                    }
                }
                list.sort(compare);
                return Logic.trivialPromise();
            };
            return SortList;
        })(Operation);
        Logic.SortList = SortList;
        var Loop = (function (_super) {
            __extends(Loop, _super);
            function Loop(params) {
                var _this = this;
                _super.call(this);
                this.valueExpr = "";
                this.indexName = "loopIndex";
                this.valueName = "loopValue";
                this.calls = [];
                if (params) {
                    $.each(params, function (name, value) {
                        if (value !== undefined) {
                            _this[name] = value;
                        }
                    });
                }
            }
            Loop.prototype.run = function (variables, functions) {
                var _this = this;
                var value = this.eval(this.valueExpr, variables, functions);
                if (typeof value !== "object") {
                    return Logic.rejectPromise("Loop: passed value should be array or object");
                }
                var isArray = Array.isArray(value), objectKeys = isArray ? null : Object.keys(value), index = 0, length = isArray ? value.length : objectKeys.length;
                if (length === 0) {
                    return Logic.trivialPromise();
                }
                var localVars = {};
                $.each(variables, function (name, variable) {
                    localVars[name] = variable;
                });
                var indexVar = localVars[this.indexName] = new Logic.Variable({ name: this.indexName, value: undefined }), valueVar = localVars[this.valueName] = new Logic.Variable({ name: this.valueName, value: undefined }), d = $.Deferred(), loopFn = function () {
                    if (index === length) {
                        d.resolve();
                        return;
                    }
                    indexVar.value = isArray ? index : objectKeys[index];
                    valueVar.value = value[indexVar.value];
                    Operation.run(_this.calls, localVars, functions)
                        .then(function (result) {
                        if (result !== undefined) {
                            if (result.flow === Flow.Break) {
                                d.resolve();
                                return;
                            }
                            else if (result.flow === Flow.Return) {
                                d.resolve(result);
                                return;
                            }
                        }
                        index++;
                        loopFn();
                    });
                };
                loopFn();
                return d.promise();
            };
            return Loop;
        })(Operation);
        Logic.Loop = Loop;
        var defaultForLoopParameters = {
            indexName: "loopIndex",
            startIndexIncluded: 0,
            endIndexExcluded: 0,
            calls: []
        };
        var ForLoop = (function (_super) {
            __extends(ForLoop, _super);
            function ForLoop(params) {
                _super.call(this);
                $.extend(this, defaultForLoopParameters, params);
            }
            ForLoop.prototype.run = function (variables, functions) {
                var _this = this;
                var step = this.startIndexIncluded < this.endIndexExcluded ? 1 : -1, localVars = $.extend({}, variables);
                localVars[this.indexName] = localVars[this.indexName] || new Logic.Variable({ name: this.indexName, value: undefined });
                var d = $.Deferred(), complete = function () {
                    $.each(variables, function (name, val) {
                        variables[name] = localVars[name];
                    });
                    d.resolve();
                }, index = this.startIndexIncluded, loopFn = function () {
                    if (index === _this.endIndexExcluded) {
                        complete();
                        return;
                    }
                    localVars[_this.indexName].value = index;
                    Operation.run(_this.calls, localVars, functions)
                        .then(function (result) {
                        if (result !== undefined && result.flow === Flow.Break) {
                            complete();
                            return;
                        }
                        index += step;
                        loopFn();
                    });
                };
                loopFn();
                return d.promise();
            };
            return ForLoop;
        })(Operation);
        Logic.ForLoop = ForLoop;
        var SwitchCase = (function () {
            function SwitchCase() {
                this.calls = [];
            }
            return SwitchCase;
        })();
        Logic.SwitchCase = SwitchCase;
        var Switch = (function (_super) {
            __extends(Switch, _super);
            function Switch(param) {
                _super.call(this);
                this.expr = "";
                this.cases = [];
                this.otherwise = [];
                if (param) {
                    this.expr = param.expr || "";
                    this.cases = param.cases || [];
                    this.otherwise = param.otherwise || [];
                }
            }
            Switch.prototype.run = function (variables, functions) {
                var _this = this;
                var exprVal = this.eval(this.expr, variables, functions), d = null;
                this.cases.forEach(function (c) {
                    var caseVal = _this.eval(c.valueExpr, variables, functions);
                    if (caseVal === exprVal) {
                        d = Operation.run(c.calls, variables, functions);
                    }
                });
                return d || (this.otherwise.length ? Operation.run(this.otherwise, variables, functions) : Logic.trivialPromise());
            };
            return Switch;
        })(Operation);
        Logic.Switch = Switch;
        (function (RetrieveType) {
            RetrieveType[RetrieveType["First"] = 0] = "First";
            RetrieveType[RetrieveType["All"] = 1] = "All";
        })(Logic.RetrieveType || (Logic.RetrieveType = {}));
        var RetrieveType = Logic.RetrieveType;
        var RetrieveObject = (function (_super) {
            __extends(RetrieveObject, _super);
            // TODO: Ivan filters
            function RetrieveObject(param) {
                _super.call(this);
                this.type = RetrieveType.All;
                this.storeId = "";
                this.variableName = "";
                this.errorVariableName = "";
                if (param) {
                    this.type = param.type;
                    this.variableName = param.variableName;
                    this.storeId = param.storeId;
                }
            }
            RetrieveObject.prototype.run = function (variables, functions) {
                var _this = this;
                var d = $.Deferred(), errorHandler = function (error) {
                    if (_this.errorVariableName) {
                        variables[_this.errorVariableName].value = error;
                        d.resolve();
                    }
                    else {
                        d.reject("[RetrieveObject] " + error);
                    }
                };
                switch (this.type) {
                    case RetrieveType.All:
                        functions.load(this.storeId).then(function (values) {
                            variables[_this.variableName].value = values;
                            d.resolve();
                        }, errorHandler);
                        break;
                    case RetrieveType.First:
                    default:
                        functions.load(this.storeId, { take: 1 }).then(function (values) {
                            variables[_this.variableName].value = values && values.length > 0 ? values[0] : null;
                            d.resolve();
                        }, errorHandler);
                        break;
                }
                return d.promise();
            };
            return RetrieveObject;
        })(Operation);
        Logic.RetrieveObject = RetrieveObject;
        var ResetObject = (function (_super) {
            __extends(ResetObject, _super);
            function ResetObject(param) {
                _super.call(this);
                this.variableName = "";
                this.errorVariableName = "";
                this.properties = [];
                if (param) {
                    if (param.variableName) {
                        this.variableName = param.variableName;
                    }
                    if (param.properties) {
                        this.properties = param.properties;
                    }
                }
            }
            ResetObject.prototype.run = function (variables, functions) {
                var _this = this;
                var d = $.Deferred(), variable = variables[this.variableName], storeId = variable.type, key = functions.keyOf(storeId, variable);
                if (!key) {
                    return Logic.rejectPromise("ResetObject: object in '" + this.variableName + "' doesn't have a key. Probably, is has not been saved to a store.");
                }
                else {
                    return functions.byKey(storeId, key).then(function (dbObject) {
                        if (_this.properties && _this.properties.length > 0) {
                            _this.properties.forEach(function (propertyName) {
                                variable[propertyName] = dbObject[propertyName];
                            });
                        }
                        else {
                            variables[_this.variableName] = dbObject;
                        }
                        d.resolve();
                    }, function (error) {
                        if (_this.errorVariableName) {
                            variables[_this.errorVariableName].value = error;
                            d.resolve();
                        }
                        else {
                            d.reject("[ResetObject] " + error);
                        }
                    });
                }
            };
            return ResetObject;
        })(Operation);
        Logic.ResetObject = ResetObject;
        var CloneObject = (function (_super) {
            __extends(CloneObject, _super);
            function CloneObject(param) {
                _super.call(this);
                this.variableName = "";
                this.resultVariableName = "";
                if (param) {
                    $.extend(this, param);
                }
            }
            CloneObject.prototype.run = function (variables, functions) {
                var variable = variables[this.variableName], resultVariable = variables[this.resultVariableName], value = variable.value, target = Array.isArray(value) ? [] : {};
                resultVariable.value = $.extend(target, value);
                return Logic.trivialPromise();
            };
            return CloneObject;
        })(Operation);
        Logic.CloneObject = CloneObject;
        var NavigateToView = (function (_super) {
            __extends(NavigateToView, _super);
            function NavigateToView(params) {
                var _this = this;
                _super.call(this);
                this.viewId = "";
                this.viewIdExpr = "";
                this.viewParametersExpr = "";
                if (params) {
                    $.each(params, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            NavigateToView.prototype.run = function (variables, functions) {
                var _this = this;
                var viewId = this.viewIdExpr ? this.eval(this.viewIdExpr, variables, functions) : this.viewId, parameters = {};
                if (this.viewParameters) {
                    this.viewParameters.forEach(function (viewParameter) {
                        var value = _this.eval(viewParameter.valueExpr, variables, functions);
                        parameters[viewParameter.name] = value;
                    });
                }
                else if (this.viewParametersExpr) {
                    parameters = this.eval(this.viewParametersExpr, variables, functions);
                }
                functions.navigateToView(viewId, parameters, this.currentPane(variables));
                return Logic.trivialPromise();
            };
            NavigateToView.prototype.currentPane = function (variables) {
                var $model = variables["$model"];
                return $model && $model.value && $model.value.pane;
            };
            return NavigateToView;
        })(Operation);
        Logic.NavigateToView = NavigateToView;
        var Save = (function (_super) {
            __extends(Save, _super);
            function Save(param) {
                var _this = this;
                _super.call(this);
                this.objectExpr = "";
                this.storeId = "";
                this.keyExpr = "";
                this.errorVariableName = "";
                if (param) {
                    $.each(param, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            Save.prototype.run = function (variables, functions) {
                var _this = this;
                var d = $.Deferred(), object = this.eval(this.objectExpr, variables, functions), key = this.keyExpr ? this.eval(this.keyExpr, variables, functions) : undefined;
                functions.save(object, this.storeId, key).then(function (result) {
                    d.resolve(result);
                }, function (error) {
                    if (_this.errorVariableName) {
                        variables[_this.errorVariableName].value = error;
                        d.resolve();
                    }
                    else {
                        d.reject("[Save] " + error);
                    }
                });
                return d.promise();
            };
            return Save;
        })(Operation);
        Logic.Save = Save;
        var Insert = (function (_super) {
            __extends(Insert, _super);
            function Insert(param) {
                var _this = this;
                _super.call(this);
                this.objectExpr = "";
                this.storeId = "";
                this.storeExpr = "";
                this.errorVariableName = "";
                if (param) {
                    $.each(param, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            Insert.prototype.run = function (variables, functions) {
                var _this = this;
                var d = $.Deferred(), object = this.eval(this.objectExpr, variables, functions), storeId = !!this.storeExpr ? this.eval(this.storeExpr, variables, functions) : this.storeId;
                functions.insert(object, storeId).then(function (result) {
                    d.resolve(result);
                }, function (error) {
                    if (_this.errorVariableName) {
                        variables[_this.errorVariableName].value = error;
                        d.resolve();
                    }
                    else {
                        d.reject("[Insert] " + error);
                    }
                });
                return d.promise();
            };
            return Insert;
        })(Operation);
        Logic.Insert = Insert;
        var Refresh = (function (_super) {
            __extends(Refresh, _super);
            function Refresh(param) {
                var _this = this;
                _super.call(this);
                this.storeId = "";
                this.storeExpr = "";
                if (param) {
                    $.each(param, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            Refresh.prototype.run = function (variables, functions) {
                var storeId = !!this.storeExpr ? this.eval(this.storeExpr, variables, functions) : this.storeId;
                functions.refresh(storeId);
                return Logic.trivialPromise();
            };
            return Refresh;
        })(Operation);
        Logic.Refresh = Refresh;
        var SendRequest = (function (_super) {
            __extends(SendRequest, _super);
            function SendRequest(param) {
                var _this = this;
                _super.call(this);
                this.urlExpr = null;
                this.method = "get";
                this.dataExpr = null;
                this.variableName = null;
                this.errorVariableName = null;
                this.cacheResponse = false;
                this.headersExpr = null;
                this.timeout = null;
                this.options = null;
                if (param) {
                    $.each(param, function (name, value) {
                        _this[name] = value;
                    });
                }
            }
            SendRequest.prototype.run = function (variables, functions) {
                var _this = this;
                var d = $.Deferred(), filtered = SendRequest.methods.filter(function (pair) { return pair.name === _this.method || pair.value === _this.method; }), method = filtered.length ? filtered[0].value : "POST", data = this.dataExpr ? this.eval(this.dataExpr, variables, functions) : undefined, url, request, dataType = this["dataType"] || "json", headers = this.headersExpr ? headers = this.eval(this.headersExpr, variables, functions) : {};
                if (!this.urlExpr) {
                    return Logic.rejectPromise("SendRequest: no URL provided");
                }
                this.method = this.method || "";
                url = this.eval(this.urlExpr, variables, functions);
                var options = $.extend({}, {
                    url: url,
                    data: data,
                    type: method,
                    cache: this.cacheResponse,
                    headers: headers,
                    timeout: $.isNumeric(this.timeout) ? this.timeout : undefined
                }, this.options);
                if (dataType === "jsonp") {
                    options["dataType"] = dataType;
                }
                request = $.ajax(options);
                request = request.then(function (result) {
                    if (_this.variableName) {
                        variables[_this.variableName].value = result;
                    }
                    d.resolve();
                }, function (error) {
                    if (_this.errorVariableName) {
                        variables[_this.errorVariableName].value = error;
                        d.resolve();
                    }
                    else {
                        d.reject("SendRequest: " + JSON.stringify(error));
                    }
                });
                request.always(functions["available"]);
                functions["busy"]();
                return d.promise();
            };
            SendRequest.methods = [
                { name: "get", value: "GET" },
                { name: "post", value: "POST" },
                { name: "delete", value: "DELETE" },
                { name: "put", value: "PUT" },
                { name: "head", value: "HEAD" },
                { name: "options", value: "OPTIONS" },
                { name: "merge", value: "MERGE" },
                { name: "patch", value: "PATCH" }
            ];
            return SendRequest;
        })(Operation);
        Logic.SendRequest = SendRequest;
        var Delete = (function (_super) {
            __extends(Delete, _super);
            function Delete(param) {
                _super.call(this);
                this.objectOrKeyExpr = "";
                this.storeId = "";
                this.errorVariableName = "";
                if (param) {
                    this.objectOrKeyExpr = param.objectOrKeyExpr || "";
                    this.storeId = param.storeId || "";
                }
            }
            Delete.prototype.run = function (variables, functions) {
                var _this = this;
                var d = $.Deferred(), objectOrKey = this.eval(this.objectOrKeyExpr, variables, functions);
                functions.delete(objectOrKey, this.storeId).then(function (result) {
                    d.resolve(result);
                }, function (error) {
                    if (_this.errorVariableName) {
                        variables[_this.errorVariableName].value = error;
                        d.resolve();
                    }
                    else {
                        d.reject("[Delete] " + error);
                    }
                });
                return d.promise();
            };
            return Delete;
        })(Operation);
        Logic.Delete = Delete;
        var NavigateBack = (function (_super) {
            __extends(NavigateBack, _super);
            function NavigateBack() {
                _super.apply(this, arguments);
            }
            NavigateBack.prototype.run = function (variables, functions) {
                functions.back();
                return Logic.trivialPromise();
            };
            return NavigateBack;
        })(Operation);
        Logic.NavigateBack = NavigateBack;
        var ShowConfirmDialog = (function (_super) {
            __extends(ShowConfirmDialog, _super);
            function ShowConfirmDialog(param) {
                _super.call(this);
                this.yesNext = [];
                this.noNext = [];
                this.messageExpr = null;
                this.titleExpr = null;
                if (param) {
                    this.yesNext = param.yesNext;
                    this.noNext = param.noNext;
                    this.messageExpr = param.messageExpr;
                    this.titleExpr = param.titleExpr;
                }
            }
            ShowConfirmDialog.prototype.run = function (variables, functions) {
                var _this = this;
                var message = this.eval(this.messageExpr, variables, functions), title = this.eval(this.titleExpr, variables, functions);
                return dxdialog
                    .confirm(message, title)
                    .then(function (result) {
                    var next = result ? _this.yesNext : _this.noNext;
                    if (next && next.length > 0) {
                        return Operation.run(next, variables, functions);
                    }
                    return Logic.trivialPromise();
                });
            };
            return ShowConfirmDialog;
        })(Operation);
        Logic.ShowConfirmDialog = ShowConfirmDialog;
        var ShowAlert = (function (_super) {
            __extends(ShowAlert, _super);
            function ShowAlert(param) {
                _super.call(this);
                this.messageExpr = null;
                this.titleExpr = null;
                if (param) {
                    this.messageExpr = param.messageExpr;
                    this.titleExpr = param.titleExpr;
                }
            }
            ShowAlert.prototype.run = function (variables, functions) {
                var message = this.eval(this.messageExpr, variables, functions), title = this.eval(this.titleExpr, variables, functions);
                return dxdialog
                    .alert(message, title)
                    .then(function () {
                    return Logic.trivialPromise();
                });
            };
            return ShowAlert;
        })(Operation);
        Logic.ShowAlert = ShowAlert;
        var ShowWebPage = (function (_super) {
            __extends(ShowWebPage, _super);
            function ShowWebPage(param) {
                _super.call(this);
                this.urlExpr = null;
                this.sameWindow = false;
                if (param) {
                    this.urlExpr = param.urlExpr;
                }
            }
            ShowWebPage.prototype.run = function (variables, functions) {
                var url = this.eval(this.urlExpr, variables, functions);
                if (AppPlayer.LayoutHelper.getDeviceType() === "desktop") {
                    if (this.sameWindow) {
                        document.location.href = url;
                    }
                    else {
                        window.open(url, "_blank");
                    }
                }
                else {
                    window.open(url, "_system");
                }
                return Logic.trivialPromise();
            };
            return ShowWebPage;
        })(Operation);
        Logic.ShowWebPage = ShowWebPage;
        var GetDeviceType = (function (_super) {
            __extends(GetDeviceType, _super);
            function GetDeviceType(param) {
                _super.call(this);
                this.resultVariableName = "";
                if (param) {
                    this.resultVariableName = param.resultVariableName;
                }
            }
            GetDeviceType.prototype.run = function (variables, functions) {
                if (!variables[this.resultVariableName]) {
                    return Logic.rejectPromise("GetDeviceType: variable '" + this.resultVariableName + "' does not exist");
                }
                var deviceType = AppPlayer.LayoutHelper.getDeviceType();
                variables[this.resultVariableName].value = deviceType;
                return Logic.trivialPromise();
            };
            return GetDeviceType;
        })(Operation);
        Logic.GetDeviceType = GetDeviceType;
        var FormatDateTime = (function (_super) {
            __extends(FormatDateTime, _super);
            function FormatDateTime(params) {
                _super.call(this);
                this.variableName = "";
                this.format = "ddMMMM";
                this.resultVariableName = "";
                if (params) {
                    this.variableName = params.variableName;
                    this.format = params.format;
                    this.resultVariableName = params.resultVariableName;
                }
            }
            FormatDateTime.prototype.run = function (variables, functions) {
                if (!variables[this.resultVariableName]) {
                    return Logic.rejectPromise("FormatDateTime: variable '" + this.resultVariableName + "' does not exist");
                }
                var date = variables[this.variableName].value;
                variables[this.resultVariableName].value = Globalize.format(date, this.format);
                return Logic.trivialPromise();
            };
            FormatDateTime.formats = [
                "HH:mm:ss",
                "h:mm:ss",
                "yyyy-MM-dd",
                "MM/dd/yyyy",
                "dd.MM.yyyy",
                "yyyy-MM-dd HH:mm:ss",
                "dd.MM.yyyy HH:mm:ss",
                "MM/dd/yyyy h:mm:ss"
            ];
            return FormatDateTime;
        })(Operation);
        Logic.FormatDateTime = FormatDateTime;
        var ParseDateTime = (function (_super) {
            __extends(ParseDateTime, _super);
            function ParseDateTime(params) {
                _super.call(this);
                this.variableName = "";
                this.properties = "";
                this.resultVariableName = "";
                if (params) {
                    this.variableName = params.variableName;
                    this.properties = params.properties;
                    this.resultVariableName = params.resultVariableName;
                }
            }
            ParseDateTime.prototype.run = function (variables, functions) {
                if (!this.variableName || !variables[this.variableName]) {
                    return Logic.rejectPromise("ParseDateTime: variable '" + this.variableName + "' does not exist");
                }
                if (!this.resultVariableName || !variables[this.resultVariableName]) {
                    return Logic.rejectPromise("ParseDateTime: result variable '" + this.resultVariableName + "' does not exist");
                }
                var properties = this.properties && this.properties.length ? this.properties.split(",") : [], data = variables[this.variableName].value;
                variables[this.resultVariableName].value = AppPlayer.parseDates(data, properties);
                return Logic.trivialPromise();
            };
            return ParseDateTime;
        })(Operation);
        Logic.ParseDateTime = ParseDateTime;
        var XmlToJs = (function (_super) {
            __extends(XmlToJs, _super);
            function XmlToJs(params) {
                _super.call(this);
                this.variableName = "";
                this.resultVariableName = "";
                if (params) {
                    this.variableName = params.variableName;
                    this.resultVariableName = params.resultVariableName;
                }
            }
            XmlToJs.prototype.run = function (variables, functions) {
                if (!this.variableName || !variables[this.variableName]) {
                    return Logic.rejectPromise("XmlToJs: variable '" + this.variableName + "' does not exist");
                }
                if (!this.resultVariableName || !variables[this.resultVariableName]) {
                    return Logic.rejectPromise("XmlToJs: result variable '" + this.resultVariableName + "' does not exist");
                }
                var xml = variables[this.variableName].value, xmlDoc = $.isXMLDoc(xml) ? xml : $.parseXML(xml);
                variables[this.resultVariableName].value = AppPlayer.xmlToJs(xmlDoc.documentElement);
                return Logic.trivialPromise();
            };
            return XmlToJs;
        })(Operation);
        Logic.XmlToJs = XmlToJs;
        var CallParam = (function () {
            function CallParam() {
            }
            return CallParam;
        })();
        Logic.CallParam = CallParam;
        ;
        var Call = (function (_super) {
            __extends(Call, _super);
            function Call(params) {
                _super.call(this);
                this.functionName = "";
                this.resultVariableName = "";
                this.params = [];
                if (params) {
                    this.functionName = params.functionName;
                    this.resultVariableName = params.resultVariableName || "";
                    this.params = params.params || [];
                }
            }
            Call.prototype.run = function (variables, functions) {
                var _this = this;
                if (typeof this.functionName !== "string" || this.functionName.length === 0) {
                    return Logic.rejectPromise("Call: a function name must be specified");
                }
                // NOTE: by default, the function w/o $... takes from $global (backward compatibility) or functions (for Module-functions)
                var modelName = this.functionName.indexOf("$model") === 0 ? "$model" : "$global", model = variables[modelName].value, fnName = this.functionName.replace(modelName + ".", ""), fn = model[fnName] || functions[fnName], params = {};
                this.params.forEach(function (param) {
                    var value = _this.eval(param.expr, variables, functions);
                    params[param.name] = value;
                });
                $.each(variables, function (name, value) {
                    if (name.indexOf("$") === 0) {
                        params[name] = variables[name].value;
                    }
                });
                if (this.resultVariableName) {
                    return fn(params)
                        .then(function (result) {
                        variables[_this.resultVariableName].value = result;
                        return Logic.trivialPromise();
                    });
                }
                return fn(params) || Logic.trivialPromise();
            };
            return Call;
        })(Operation);
        Logic.Call = Call;
        var Debugger = (function (_super) {
            __extends(Debugger, _super);
            function Debugger() {
                _super.apply(this, arguments);
            }
            Debugger.prototype.run = function (variables, functions) {
                /* tslint:disable: no-debugger */
                debugger;
                /* tslint:enable */
                return Logic.trivialPromise();
            };
            return Debugger;
        })(Operation);
        Logic.Debugger = Debugger;
        var Log = (function (_super) {
            __extends(Log, _super);
            function Log(params) {
                _super.call(this);
                this.expr = "";
                this.level = "info";
                if (params) {
                    this.expr = params.expr;
                    this.level = params.level || this.level;
                }
            }
            Log.prototype.run = function (variables, functions) {
                if (!this.expr) {
                    return Logic.rejectPromise("Log: an expression must be specified");
                }
                var message = this.eval(this.expr, variables, functions);
                var log = functions["log"];
                log(this.level, message);
                return Logic.trivialPromise();
            };
            return Log;
        })(Operation);
        Logic.Log = Log;
        var Eval = (function (_super) {
            __extends(Eval, _super);
            function Eval(params) {
                _super.call(this);
                this.expr = "";
                this.errorVariableName = "";
                if (params) {
                    this.expr = params.expr;
                    this.errorVariableName = params.errorVariableName;
                }
            }
            Eval.prototype.run = function (variables, functions) {
                if (!this.expr) {
                    return Logic.rejectPromise("Eval: an expression must be specified");
                }
                return this.eval(this.expr, variables);
            };
            Eval.prototype.eval = function (expr, variables) {
                var _this = this;
                var errorHandler = function (d, e) {
                    if (_this.errorVariableName) {
                        variables[_this.errorVariableName].value = e;
                        d.resolve();
                    }
                    else {
                        d.reject(e);
                    }
                }, vars = {}, restoreVariablesExpr = "";
                $.each(variables, function (name, variable) {
                    vars[name] = variable.value;
                    //NOTE: restore values to BizLogic-variables after user-code execution
                    restoreVariablesExpr += "variables['" + name + "'].value=" + name + ";";
                });
                return Eval.exec(expr, restoreVariablesExpr, errorHandler, variables, vars);
            };
            Eval.runFn = function (body, values, variables) {
                var bodyEval = body.replace(/\n/g, " ").replace(/\r/g, " ").replace(/"/g, "\\\""), fn = new Function("_values_", "variables", "with(_values_) {return eval(\"" + bodyEval + "\")}");
                return fn.apply(null, [values, variables]);
            };
            Eval.exec = function (body, restoreVariablesExpr, errorHandler, variables, values) {
                var _result_ = $.Deferred();
                try {
                    var promise = Eval.runFn(body, values);
                    if (window["AppPlayer"].isPromise(promise)) {
                        promise.then(function () {
                            Eval.runFn(restoreVariablesExpr, values, variables);
                            _result_.resolve();
                        }, function (e) {
                            errorHandler(_result_, e);
                        });
                    }
                    else {
                        Eval.runFn(restoreVariablesExpr, values, variables);
                        _result_.resolve();
                    }
                }
                catch (e) {
                    errorHandler(_result_, e);
                }
                return _result_;
            };
            return Eval;
        })(Operation);
        Logic.Eval = Eval;
    })(Logic = AppPlayer.Logic || (AppPlayer.Logic = {}));
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    "use strict";
    (function (TYPES) {
        TYPES[TYPES["PRIMITIVE_TYPE"] = 0] = "PRIMITIVE_TYPE";
        TYPES[TYPES["ARRAY_TYPE"] = 1] = "ARRAY_TYPE";
        TYPES[TYPES["OBJECT_TYPE"] = 2] = "OBJECT_TYPE";
        TYPES[TYPES["STORE_TYPE"] = 3] = "STORE_TYPE";
        TYPES[TYPES["TYPED_OBJECT"] = 4] = "TYPED_OBJECT";
    })(AppPlayer.TYPES || (AppPlayer.TYPES = {}));
    var TYPES = AppPlayer.TYPES;
    ;
    var TypeInfoRepository = (function () {
        function TypeInfoRepository(storesConfig) {
            // from DevExpress.data.utils.odata.keyConverters
            this.oDataToJsonTypeMap = {
                String: "string",
                Int32: "number",
                Int64: "number",
                Guid: "string",
                Boolean: "boolean"
            };
            this.types = [];
            this.addWithList({
                name: TypeInfoRepository.BOOLEAN,
                kind: TYPES.PRIMITIVE_TYPE,
                defaultValueCtor: function () { return false; },
                toUIString: function (value) { return ko.unwrap(value).toString(); }
            });
            this.addWithList({
                name: "number",
                kind: TYPES.PRIMITIVE_TYPE,
                defaultValueCtor: function () { return 0; },
                toUIString: function (value) { return ko.unwrap(value).toString(); }
            });
            this.addWithList({
                name: "string",
                kind: TYPES.PRIMITIVE_TYPE,
                defaultValueCtor: function () { return ""; },
                toUIString: function (value) { return "\"" + ko.unwrap(value) + "\""; }
            });
            this.addWithList({
                name: "datetime",
                kind: TYPES.PRIMITIVE_TYPE,
                defaultValueCtor: function () { return new Date(); },
                toUIString: function (value) { return ko.unwrap(value).toString(); }
            });
            this.addWithList({
                name: "object",
                kind: TYPES.OBJECT_TYPE,
                defaultValueCtor: function () { return null; },
                toUIString: function (value) {
                    if (value === null) {
                        return "null";
                    }
                    if (typeof value === "undefined") {
                        return "undefined";
                    }
                    return ko.unwrap(value).toString();
                }
            });
            this.addWithList({
                name: "guid",
                kind: TYPES.PRIMITIVE_TYPE,
                defaultValueCtor: function () { return ""; },
                toUIString: function (value) { return ko.unwrap(value); }
            });
            this.addStoreTypes(storesConfig);
        }
        Object.defineProperty(TypeInfoRepository, "BOOLEAN", {
            get: function () { return "boolean"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TypeInfoRepository, "OBJECT", {
            get: function () { return "object"; },
            enumerable: true,
            configurable: true
        });
        TypeInfoRepository.hasProperties = function (t) {
            if (t.kind !== TYPES.STORE_TYPE) {
                return false;
            }
            return (t.properties.length > 1 && !!t.keyProperty) || (t.properties.length > 0 && !t.keyProperty);
        };
        TypeInfoRepository.migrateObject = function (obj, t) {
            if (t.kind !== TYPES.STORE_TYPE) {
                return obj;
            }
            if (obj instanceof Object) {
                var properties = t.properties;
                if (properties.length) {
                    var propNames = {};
                    if (t.keyProperty) {
                        propNames[t.keyProperty.name] = true;
                    }
                    properties.forEach(function (prop) {
                        if (!obj.hasOwnProperty(prop.name)) {
                            obj[prop.name] = prop.type.defaultValueCtor();
                        }
                        propNames[prop.name] = true;
                    });
                    $.each(Object.keys(obj), function (index, propName) {
                        if (!propNames[propName]) {
                            delete obj[propName];
                        }
                    });
                    return obj;
                }
                else {
                    return obj;
                }
            }
            else {
                return t.defaultValueCtor();
            }
        };
        TypeInfoRepository.prototype.get = function (typeName) {
            return this.types[ko.unwrap(typeName)];
        };
        TypeInfoRepository.prototype.getAll = function () {
            return this.types;
        };
        TypeInfoRepository.prototype.typeOf = function (value) {
            var valueType = typeof value;
            if (this.types[valueType]) {
                return valueType;
            }
            for (var i = 0; i < this.types.length; i++) {
                var typeInfo = this.types[i];
                if (typeInfo.kind === TYPES.PRIMITIVE_TYPE) {
                    if (typeof typeInfo.defaultValueCtor() === valueType) {
                        return typeInfo.name;
                    }
                    else {
                        if (this.isStoreObject(value, typeInfo)) {
                            return typeInfo.name;
                        }
                    }
                }
            }
            return null;
        };
        TypeInfoRepository.prototype.storeId = function (typeName) {
            var type = this.get(typeName);
            if (type) {
                if (type.kind === TYPES.STORE_TYPE) {
                    return type.name;
                }
                else if (type.kind === TYPES.ARRAY_TYPE && type.nestedType.kind === TYPES.STORE_TYPE) {
                    return type.nestedType.name;
                }
            }
            return null;
        };
        TypeInfoRepository.prototype.addTypedObjectType = function (typeInfo) {
            if (!typeInfo) {
                return;
            }
            this._add(typeInfo);
        };
        TypeInfoRepository.prototype.addStoreTypes = function (storesConfig) {
            var _this = this;
            if (!storesConfig) {
                return;
            }
            storesConfig.forEach(function (store) {
                var keyProperty;
                var properties = [];
                if (store.fields) {
                    store.fields.forEach(function (field) {
                        var baseType = _this.get(field.type);
                        if (!baseType) {
                            console.warn("Store '" + store.id + "' field '" + field.name + "' has unknown type '" + field.type + "'");
                            baseType = _this.get("object");
                        }
                        var property = {
                            name: field.name,
                            type: baseType
                        };
                        if (field.name === store.key) {
                            keyProperty = property;
                        }
                        else {
                            properties.push(property);
                        }
                    });
                }
                if (!keyProperty && store.key) {
                    var keyTypeName = _this.oDataToJsonTypeMap[store["keyType"]];
                    keyProperty = { name: store.key, type: _this.get(keyTypeName) || _this.get(TypeInfoRepository.OBJECT) };
                }
                _this.addWithList({
                    name: store.id,
                    kind: TYPES.STORE_TYPE,
                    keyProperty: keyProperty,
                    properties: properties,
                    defaultValueCtor: function () { return _this.defaultObjectCtor(properties); },
                    toUIString: function (value) { return "{" + store.id + "}"; }
                });
            });
        };
        TypeInfoRepository.prototype.isStoreObject = function (object, typeInfo) {
            if (!$.isPlainObject(object)) {
                return false;
            }
            var result = true;
            $.each(object, function (propertyName, propertyValue) {
                result = typeInfo.properties.some(function (property) { return propertyName === property.name; });
                return result;
            });
            return result;
        };
        TypeInfoRepository.prototype.defaultObjectCtor = function (properties) {
            var result = {};
            properties.forEach(function (property) {
                result[property.name] = property.type.defaultValueCtor();
            });
            return result;
        };
        TypeInfoRepository.prototype.createListType = function (plainType) {
            var listType = {
                name: plainType.name + "[]",
                kind: TYPES.ARRAY_TYPE,
                defaultValueCtor: function () { return []; },
                nestedType: plainType,
                toUIString: function (value) {
                    value = ko.unwrap(value);
                    var result = plainType.name + "[";
                    if (value && value.length > 0) {
                        result += value.length;
                    }
                    return result + "]";
                }
            };
            return listType;
        };
        TypeInfoRepository.prototype.addWithList = function (type) {
            this._add(type);
            var listType = this.createListType(type);
            this._add(listType);
        };
        TypeInfoRepository.prototype._add = function (type) {
            this.types.push(type);
            this.types[type.name] = type;
        };
        return TypeInfoRepository;
    })();
    AppPlayer.TypeInfoRepository = TypeInfoRepository;
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    var Logic;
    (function (Logic) {
        "use strict";
        var Variable = (function () {
            function Variable(config) {
                this._config = config;
                this.value = config.value;
            }
            Object.defineProperty(Variable.prototype, "name", {
                get: function () {
                    return this._config.name;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Variable.prototype, "parameter", {
                get: function () {
                    return this._config.parameter || false;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Variable.prototype, "type", {
                get: function () {
                    return this._config.type || "object";
                },
                enumerable: true,
                configurable: true
            });
            Variable.prototype.resetValue = function () {
                this.value = AppPlayer.clone(this._config.value);
            };
            Variable.fromJson = function (json) {
                var result = new Variable(json);
                return result;
            };
            return Variable;
        })();
        Logic.Variable = Variable;
    })(Logic = AppPlayer.Logic || (AppPlayer.Logic = {}));
})(AppPlayer || (AppPlayer = {}));
/*module AppPlayer {
"use strict";
import dxdata = DevExpress.data;

export class LocalStore extends dxdata.LocalStore {
    constructor(storeOptions: dxdata.LocalStoreOptions) {
        super(storeOptions);
    }

    byKey(key: any, extraOptions: any): JQueryPromise<any> {
        return super.byKey(key, extraOptions)
            .then((value: any) => {
                if(value instanceof Object) {
                    return $.extend({}, value);
                } else {
                    return value;
                }
            });
    }

    load(obj?: dxdata.LoadOptions): JQueryPromise<any[]> {
        return super.load(obj)
            .then((value: any[]) => {
                if(value) {
                    $.each(value, (name, val) => {
                        if(val instanceof Object) {
                            value[name] = $.extend({}, val);
                        }
                    });
                }
                return value;
            });
    }
}
}*/ 
var AppPlayer;
(function (AppPlayer) {
    var Views;
    (function (Views) {
        "use strict";
    })(Views = AppPlayer.Views || (AppPlayer.Views = {}));
})(AppPlayer || (AppPlayer = {}));
var AppPlayer;
(function (AppPlayer) {
    var Views;
    (function (Views) {
        "use strict";
        var dxdevice = DevExpress.devices;
        var FileImageEditorViewModel = (function () {
            function FileImageEditorViewModel(options) {
                var _this = this;
                this.fullBase64Header = "data:image/png;base64,";
                this.base64Header = "base64,";
                this.PHOTOLIBRARY = 0;
                this.CAMERA = 1;
                this.actionSheetOptions = ko.observable(null);
                this.fileSelected = function (_model, event) {
                    var fileInput = event.currentTarget.parentElement.getElementsByTagName("input")[0];
                    _this._handleFiles(event.target, _this.value);
                    fileInput.value = null;
                };
                this["style"] = options.style;
                this.value = options.value || ko.observable();
                this.imageSrc = ko.computed(function () {
                    return _this.addBase64Header(ko.unwrap(ko.unwrap(_this.value)));
                });
                this.emptyLabelVisible = ko.computed(function () {
                    return !_this.imageSrc();
                });
                this.imageStyle = ko.computed(function () {
                    var style = _this["style"], width = !isNaN(parseInt(style.width, 10)) ? style.width : undefined, height = !isNaN(parseInt(style.height, 10)) ? style.height : undefined;
                    if (_this.emptyLabelVisible()) {
                        return { width: width || height, height: height || width };
                    }
                    return { width: width || "auto", height: height || "auto" };
                });
                this.emptyLabel = options.emptyLabel;
                this.clearText = options.clearText;
                this.takePhotoText = options.takePhotoText;
                this.openGalleryText = options.openGalleryText;
            }
            FileImageEditorViewModel.prototype.addBase64Header = function (value) {
                if (value == null || value === "(Image)" || value === "") {
                    return null;
                }
                var result = AppPlayer.startsWith(value, "http")
                    ? value
                    : this.fullBase64Header + this.removeBase64Header(value);
                return result;
            };
            FileImageEditorViewModel.prototype.removeBase64Header = function (value) {
                if (value !== null) {
                    var index = value.indexOf(this.base64Header);
                    return index === -1 ? value : value.substr(index + this.base64Header.length);
                }
            };
            FileImageEditorViewModel.prototype._getActionSheetOption = function (event) {
                var _this = this;
                var isDesktop = dxdevice.current().deviceType === "desktop", isCordova = !!window["cordova"], dataSource = [
                    {
                        text: this.takePhotoText,
                        fileSelected: this.fileSelected,
                        touchStart: function () { },
                        visible: isCordova,
                        click: function (args) {
                            _this._cordovaCameraDelegate(_this.CAMERA);
                        }
                    },
                    {
                        text: this.openGalleryText,
                        fileSelected: this.fileSelected,
                        touchStart: function () {
                            if (!isCordova) {
                                _this.control.hide();
                                _this.showFileDialog(event);
                            }
                        },
                        visible: true,
                        click: function (args) {
                            if (isCordova) {
                                _this._cordovaCameraDelegate(_this.PHOTOLIBRARY);
                            }
                            else {
                                _this.showFileDialog(event);
                            }
                        }
                    },
                    {
                        text: this.clearText,
                        fileSelected: this.fileSelected,
                        visible: !this.emptyLabelVisible(),
                        touchStart: function () { },
                        click: function () {
                            _this.value(null);
                        }
                    }];
                return {
                    target: event.currentTarget,
                    usePopover: isDesktop,
                    visible: ko.observable(false),
                    showTitle: false,
                    width: isDesktop ? "auto" : undefined,
                    dataSource: dataSource,
                    onItemClick: function (eventArgs) { eventArgs.itemData.click(eventArgs); },
                    onInitialized: function (args) { _this.control = args.component; }
                };
            };
            FileImageEditorViewModel.prototype._cordovaCameraDelegate = function (sourceType) {
                if (sourceType === void 0) { sourceType = this.CAMERA; }
                var onSuccess = function (imageData) {
                    this.value(imageData);
                }, onFail = function (message) {
                    console.log("Failed because: " + message);
                };
                navigator["camera"].getPicture(onSuccess.bind(this), onFail, { quality: 50, destinationType: 0, sourceType: sourceType });
            };
            ;
            FileImageEditorViewModel.prototype._handleFiles = function (filesHolder, value) {
                var _this = this;
                var files = filesHolder.files;
                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    var imageType = /image.*/;
                    if (!file.type.match(imageType)) {
                        continue;
                    }
                    var fr = new FileReader();
                    fr.onload = function (args) {
                        //var encodedImage = fr.result.replace(/^data:[^,]+,/, '');
                        value(_this.removeBase64Header(fr.result));
                    };
                    fr.readAsDataURL(file);
                }
            };
            ;
            FileImageEditorViewModel.prototype.showFileDialog = function (args) {
                var fileInput = args.currentTarget.parentElement.getElementsByTagName("input")[0];
                if (fileInput) {
                    fileInput.click();
                    args.stopPropagation();
                }
            };
            ;
            FileImageEditorViewModel.prototype.showFileDialogOrActionSheet = function (_viewModel, args) {
                this.actionSheetOptions(this._getActionSheetOption(args));
                if (this.emptyLabelVisible() && !window["cordova"]) {
                    this.showFileDialog(args);
                }
                else {
                    this.actionSheetOptions().visible(true);
                }
            };
            ;
            return FileImageEditorViewModel;
        })();
        Views.FileImageEditorViewModel = FileImageEditorViewModel;
    })(Views = AppPlayer.Views || (AppPlayer.Views = {}));
})(AppPlayer || (AppPlayer = {}));

//# sourceMappingURL=data:application/json;base64,
